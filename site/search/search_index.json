{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"M\u00e1quinas virtuales y Contenedores.","text":""},{"location":"index.html#que-es-la-virtualizacion","title":"\u00bfQu\u00e9 es la virtualizaci\u00f3n?","text":"<p>Permite reservar una serie de recursos del sistema (RAM, CPU, DISCO) para emular un sistema operativo (guest  / invitado) dentro de otro (host / anfitri\u00f3n).</p> <p>Ventajas:</p> <ul> <li>Podemos aprovechar mejor el hardware de la m\u00e1quina anfitriona, ya que estamos ejecutando varios \"ordenadores\" en uno mismo, aprovechando recursos que de otra forma es posible que no se llegaran a usar.</li> <li>Permite ejecutar software que quiz\u00e1 sea incompatible con tu sistema operativo anfitri\u00f3n, ya sea por un motivo de versiones o porque son sistemas operativos diferentes (Windows, Linux, MAC).</li> </ul>"},{"location":"index.html#que-es-un-hipervisor","title":"\u00bfQu\u00e9 es un Hipervisor?","text":"<p>El hipervisor es la parte software que permite crear y gestionar las m\u00e1quinas virtuales (asignar recursos, crear los discos virtuales, etc). </p> <p>Se distinguen dos tipos:</p> <p>Hipervisores de tipo 1 (hipervisores bare metal):</p> <ul> <li> <p>No necesitan de un sistema operativo anfitri\u00f3n para comunicarse con los componentes del ordenador, por tanto la comunicaci\u00f3n entre las m\u00e1quinas virtuales y los componentes es m\u00e1s directa, r\u00e1pida y eficiente. Es decir, si una m\u00e1quina virtual necesita hacer una operaci\u00f3n, se comunicar\u00e1 con el hipervisor y \u00e9ste con la CPU. </p> </li> <li> <p>Ejemplos: VMWare ESXi, KVM, Hyper-V</p> </li> </ul> <p>Hipervisores de tipo 2 (hipervisores alojados):</p> <ul> <li> <p>Son una aplicaci\u00f3n m\u00e1s del sistema operativo instalado en la m\u00e1quina y el hipervisor accede al hardware de la m\u00e1quina a trav\u00e9s de ese sistema operativo. Por tanto, si una m\u00e1quina virtual requiere hacer una operaci\u00f3n, pasar\u00e1 la orden al hipervisor, \u00e9ste al sistema operativo y de ah\u00ed a la CPU.</p> </li> <li> <p>Ejemplos: VirtualBox y VMWare Workstation.</p> </li> </ul>"},{"location":"index.html#que-es-un-contenedor","title":"\u00bfQu\u00e9 es un Contenedor?","text":"<ul> <li> <p>Los contenedores, a diferencia de las m\u00e1quinas virtuales, comparten el kernel, archivos binarios y librer\u00edas del sistema operativo (anfitri\u00f3n).</p> <p>\ud83d\udca5 Por tanto un host Linux podr\u00e1 crear contenedores relacionados con Linux, y un host Windows podr\u00e1 crear contenedores Windows.</p> </li> </ul> <p>NOTA</p> <ul> <li>Windows tiene la posibilidad de ejecutar contenedores Linux a trav\u00e9s del aislamiento de Hyper-V (WSL). </li> <li>B\u00e1sicamente activas un Kernel Linux en Windows y por tanto en Windows s\u00ed puedes generar contenedores de Linux.  </li> </ul> <ul> <li> <p>Cada contenedor ocupa mucho menos espacio, puesto que se ahorra todo los ficheros del sistema del sistema operativo que ahora recoge de la m\u00e1quina anfitriona.</p> </li> <li> <p>Su objetivo no es simular un sistema operativo completo, sino un servicio/aplicaci\u00f3n en concreto, por tanto aqu\u00ed tambi\u00e9n se produce un ahorro de espacio en disco.</p> <p>\ud83d\udca5 Aunque un \u00fanico contenedor puede emular varios servicios/aplicaciones es habitual tener varios contenedores y cada uno que tenga \u00fanicamente corriendo 1 servicio/  aplicaci\u00f3n y las dependencias que se necesitan para que \u00e9ste funcione.</p> </li> <li> <p>Arranca mucho m\u00e1s r\u00e1pido que una m\u00e1quina virtual, pues utiliza los procesos y ficheros del sistema del anfitri\u00f3n, el cual ya se encuentra arrancado.</p> </li> <li> <p>Docker es integrable con servicios en la nube:</p> <p>\ud83d\udca5 AWS (Amazon Web Service).</p> <p>\ud83d\udca5 Azure (Microsoft).</p> <p>\ud83d\udca5 Google Cloud.</p> </li> <li> <p>Docker es un software que permite la creaci\u00f3n y gesti\u00f3n de contenedores. </p> </li> </ul>"},{"location":"0_MaquinasContenedores.html","title":"M\u00e1quinas virtuales y Contenedores.","text":""},{"location":"0_MaquinasContenedores.html#que-es-la-virtualizacion","title":"\u00bfQu\u00e9 es la virtualizaci\u00f3n?","text":"<p>Permite reservar una serie de recursos del sistema (RAM, CPU, DISCO) para emular un sistema operativo (guest  / invitado) dentro de otro (host / anfitri\u00f3n).</p> <p>Ventajas:</p> <ul> <li>Podemos aprovechar mejor el hardware de la m\u00e1quina anfitriona, ya que estamos ejecutando varios \"ordenadores\" en uno mismo, aprovechando recursos que de otra forma es posible que no se llegaran a usar.</li> <li>Permite ejecutar software que quiz\u00e1 sea incompatible con tu sistema operativo anfitri\u00f3n, ya sea por un motivo de versiones o porque son sistemas operativos diferentes (Windows, Linux, MAC).</li> </ul>"},{"location":"0_MaquinasContenedores.html#que-es-un-hipervisor","title":"\u00bfQu\u00e9 es un Hipervisor?","text":"<p>El hipervisor es la parte software que permite crear y gestionar las m\u00e1quinas virtuales (asignar recursos, crear los discos virtuales, etc). </p> <p>Se distinguen dos tipos:</p> <p>Hipervisores de tipo 1 (hipervisores bare metal):</p> <ul> <li> <p>No necesitan de un sistema operativo anfitri\u00f3n para comunicarse con los componentes del ordenador, por tanto la comunicaci\u00f3n entre las m\u00e1quinas virtuales y los componentes es m\u00e1s directa, r\u00e1pida y eficiente. Es decir, si una m\u00e1quina virtual necesita hacer una operaci\u00f3n, se comunicar\u00e1 con el hipervisor y \u00e9ste con la CPU. </p> </li> <li> <p>Ejemplos: VMWare ESXi, KVM, Hyper-V</p> </li> </ul> <p>Hipervisores de tipo 2 (hipervisores alojados):</p> <ul> <li> <p>Son una aplicaci\u00f3n m\u00e1s del sistema operativo instalado en la m\u00e1quina y el hipervisor accede al hardware de la m\u00e1quina a trav\u00e9s de ese sistema operativo. Por tanto, si una m\u00e1quina virtual requiere hacer una operaci\u00f3n, pasar\u00e1 la orden al hipervisor, \u00e9ste al sistema operativo y de ah\u00ed a la CPU.</p> </li> <li> <p>Ejemplos: VirtualBox y VMWare Workstation.</p> </li> </ul>"},{"location":"0_MaquinasContenedores.html#que-es-un-contenedor","title":"\u00bfQu\u00e9 es un Contenedor?","text":"<ul> <li> <p>Los contenedores, a diferencia de las m\u00e1quinas virtuales, comparten el kernel, archivos binarios y librer\u00edas del sistema operativo (anfitri\u00f3n).</p> <p>\ud83d\udca5 Por tanto un host Linux podr\u00e1 crear contenedores relacionados con Linux, y un host Windows podr\u00e1 crear contenedores Windows.</p> </li> </ul> <p>NOTA</p> <ul> <li>Windows tiene la posibilidad de ejecutar contenedores Linux a trav\u00e9s del aislamiento de Hyper-V (WSL). </li> <li>B\u00e1sicamente activas un Kernel Linux en Windows y por tanto en Windows s\u00ed puedes generar contenedores de Linux.  </li> </ul> <ul> <li> <p>Cada contenedor ocupa mucho menos espacio, puesto que se ahorra todo los ficheros del sistema del sistema operativo que ahora recoge de la m\u00e1quina anfitriona.</p> </li> <li> <p>Su objetivo no es simular un sistema operativo completo, sino un servicio/aplicaci\u00f3n en concreto, por tanto aqu\u00ed tambi\u00e9n se produce un ahorro de espacio en disco.</p> <p>\ud83d\udca5 Aunque un \u00fanico contenedor puede emular varios servicios/aplicaciones es habitual tener varios contenedores y cada uno que tenga \u00fanicamente corriendo 1 servicio/  aplicaci\u00f3n y las dependencias que se necesitan para que \u00e9ste funcione.</p> </li> <li> <p>Arranca mucho m\u00e1s r\u00e1pido que una m\u00e1quina virtual, pues utiliza los procesos y ficheros del sistema del anfitri\u00f3n, el cual ya se encuentra arrancado.</p> </li> <li> <p>Docker es integrable con servicios en la nube:</p> <p>\ud83d\udca5 AWS (Amazon Web Service).</p> <p>\ud83d\udca5 Azure (Microsoft).</p> <p>\ud83d\udca5 Google Cloud.</p> </li> <li> <p>Docker es un software que permite la creaci\u00f3n y gesti\u00f3n de contenedores. </p> </li> </ul>"},{"location":"1_ComandosDocker.html","title":"Comandos B\u00e1sicos en Docker","text":"<p>Crear un contenedor</p> <p> \ud83d\udd25 docker [ run | start | stop | restart ] [OPCIONES] [contenedor] \ud83d\udd25 </p> Argumentos  Funci\u00f3n  <code>run</code> Crea y arranca un contenedor --&gt; Si lo ejecutas varias veces ejecutas varios contenedores. <code>start | stop |restart</code> Arranca/Detiene/Reinicia un contenedor ya existente. <code>-d</code> Arranca en segundo plano. <code>-p</code> Traducci\u00f3n de puertos entre el contenedor y la m\u00e1quina anfitriona. Solo se puede hacer a la hora de crear la m\u00e1quina. <code>--name</code> Nombre de la m\u00e1quina. <code>-it</code> Redirige la salida al terminal del contenedor, es decir, accedes al terminal del contenedor."},{"location":"1_ComandosDocker.html#comandos","title":"Comandos.","text":"<p>Si nos fijamos en la salida vemos que lo primero que hace es buscar la imagen \u201chello-world\u201d en local, al no encontrarlo, lo descarga de un repositorio de docker y posteriormente lo ejecuta.  Si lo ejecut\u00e1is una segunda vez el c\u00f3digo ya se ejecutar\u00e1 directamente en local (/var/lib/docker/). Tambi\u00e9n podemos apreciar que la imagen que se carga es \u201chello-world:latest\u201d, es decir, la \u00faltima versi\u00f3n de la imagen del contenedor.</p> <p>Mostrar los contenedores del sistema, tanto parados como activos</p> <p> \ud83d\udd25 docker ps [opciones] \ud83d\udd25 </p> <p>\u2728 Con \u2013a se muestran todos los contenedores, los activos y los detenidos.</p> <p>\u2728 Una vez sabemos su \u201cnombre\u201d o su \u201cID\u201d podemos arrancarlo/pararlo/reiniciarlo.</p> <p>Copiar o renombrar contenedores.</p> <p> \ud83d\udd25 docker [ cp |rename ] [contenedor] \ud83d\udd25  </p> <p>Ejecutar comandos dentro del contenedor</p> <p> \ud83d\udd25 docker exec [OPCIONES] NombreContenedor Comando [ArgumentosComando] \ud83d\udd25 </p> <p>\u2728 -d: Ejecuta en segundo plano.</p> <p>\u2728-it: Enlaza la entrada y salida a nuestro terminal. Es como entrar al terminal del contenedor.</p> <p>Acceder a los logs de ejecuci\u00f3n del contenedor.</p> <p> \ud83d\udd25 docker logs [OPCIONES] NombreContenedor \ud83d\udd25 </p> <p>Listar todos los contenedores.</p> <p> \ud83d\udd25 docker container ls \u2013a \ud83d\udd25 </p> <p>Eliminar un contenedor</p> <p> \ud83d\udd25 docker container rm NombreContenedor \ud83d\udd25 </p> <p>\u2728 Elimina un contenedor.</p> <p>Crear una imagen a partir de un contenedor</p> <p> \ud83d\udd25 docker commit contenedor imagen \ud83d\udd25 </p> <p>\u2728Crear una imagen de un contenedor es la forma m\u00e1s sencilla para subir nuestro contenedor a la nube o para hacer un backup local.</p>"},{"location":"2_EjemplosDocker.html","title":"Ejemplos B\u00e1sicos en Docker","text":"<p>Aviso</p> <p>En los siguientes ejemplos el nombre del contenedor ser\u00e1 Salva.</p> <ul> <li>Crear un contenedor nuevo con la \u00faltima versi\u00f3n de Ubuntu.</li> </ul> <pre><code>docker run -d -it --name Salva ubuntu\n</code></pre> <ul> <li>Acceder al contenedor haciendo uso del int\u00e9rprete /bin/bash.</li> </ul> <pre><code>docker exec -it Salva bash\n</code></pre> <ul> <li>Actualiza los repositorios e instala dentro del contendor.</li> </ul> <pre><code>apt-get update\napt-get install nano iputils-ping net-tools iproute2\n</code></pre> <ul> <li>Det\u00e9n el contenedor desde la m\u00e1quina anfitriona.</li> </ul> <pre><code>docker stop Salva\n</code></pre> <ul> <li>Arranca el contenedor.</li> </ul> <pre><code>docker start Salva\n</code></pre> <ul> <li>Descargar un fichero del contenedor a la m\u00e1quina anfitriona.</li> </ul> <pre><code>docker cp Salva:/home/prueba.txt .\n</code></pre> <ul> <li>Crear una imagen del contendor.</li> </ul> <pre><code>docker commit Salva copiaContendor\n</code></pre> <ul> <li>Lista las imagenes que tienes en el sistema</li> </ul> <pre><code>docker images\n</code></pre> <ul> <li>Crea un .tar de la imagen copiaContendor.</li> </ul> <pre><code>docker image save -o /home/usuario/backup.tar copiaContendor\n</code></pre> <ul> <li>Saca la imagen del .tar y vu\u00e9lcala en un contenedor. Recuerda estar en el mismo directorio que el .tar.</li> </ul> <pre><code>docker load -i backup.tar\ndocker run -d -it --name NuevoContenedor copiaContendor\n</code></pre>"},{"location":"3_Clase.html","title":"\u00bfC\u00f3mo trabajar en clase/casa usando docker?","text":"<p>Muchos de vosotros hac\u00e9is uso de Windows en casa, por lo que os puede entrar dudas de c\u00f3mo podemos llevar nuestro trabajo a casa para seguir con \u00e9l.</p> <p>Existen dos opciones explicadas en los siguientes v\u00eddeos:</p> <ol> <li> <p>Guardarnos las im\u00e1genes en un USB.</p> </li> <li> <p>Subir las im\u00e1genes a Docker HUB..</p> </li> </ol>"}]}