{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"M\u00e1quinas virtuales y Contenedores.","text":""},{"location":"index.html#que-es-la-virtualizacion","title":"\u00bfQu\u00e9 es la virtualizaci\u00f3n?","text":"<p>Permite reservar una serie de recursos del sistema (RAM, CPU, DISCO) para emular un sistema operativo (guest  / invitado) dentro de otro (host / anfitri\u00f3n).</p> <p>Ventajas:</p> <ul> <li>Podemos aprovechar mejor el hardware de la m\u00e1quina anfitriona, ya que estamos ejecutando varios \"ordenadores\" en uno mismo, aprovechando recursos que de otra forma es posible que no se llegaran a usar.</li> <li>Permite ejecutar software que quiz\u00e1 sea incompatible con tu sistema operativo anfitri\u00f3n, ya sea por un motivo de versiones o porque son sistemas operativos diferentes (Windows, Linux, MAC).</li> </ul>"},{"location":"index.html#que-es-un-hipervisor","title":"\u00bfQu\u00e9 es un Hipervisor?","text":"<p>El hipervisor es la parte software que permite crear y gestionar las m\u00e1quinas virtuales (asignar recursos, crear los discos virtuales, etc). </p> <p>Se distinguen dos tipos:</p> <p>Hipervisores de tipo 1 (hipervisores bare metal):</p> <ul> <li> <p>No necesitan de un sistema operativo anfitri\u00f3n para comunicarse con los componentes del ordenador, por tanto la comunicaci\u00f3n entre las m\u00e1quinas virtuales y los componentes es m\u00e1s directa, r\u00e1pida y eficiente. Es decir, si una m\u00e1quina virtual necesita hacer una operaci\u00f3n, se comunicar\u00e1 con el hipervisor y \u00e9ste con la CPU. </p> </li> <li> <p>Ejemplos: VMWare ESXi, KVM, Hyper-V</p> </li> </ul> <p>Hipervisores de tipo 2 (hipervisores alojados):</p> <ul> <li> <p>Son una aplicaci\u00f3n m\u00e1s del sistema operativo instalado en la m\u00e1quina y el hipervisor accede al hardware de la m\u00e1quina a trav\u00e9s de ese sistema operativo. Por tanto, si una m\u00e1quina virtual requiere hacer una operaci\u00f3n, pasar\u00e1 la orden al hipervisor, \u00e9ste al sistema operativo y de ah\u00ed a la CPU.</p> </li> <li> <p>Ejemplos: VirtualBox y VMWare Workstation.</p> </li> </ul>"},{"location":"index.html#que-es-un-contenedor","title":"\u00bfQu\u00e9 es un Contenedor?","text":"<ul> <li> <p>Los contenedores, a diferencia de las m\u00e1quinas virtuales, comparten el kernel, archivos binarios y librer\u00edas del sistema operativo (anfitri\u00f3n).</p> <p>\ud83d\udca5 Por tanto un host Linux podr\u00e1 crear contenedores relacionados con Linux, y un host Windows podr\u00e1 crear contenedores Windows.</p> </li> </ul> <p>NOTA</p> <ul> <li>Windows tiene la posibilidad de ejecutar contenedores Linux a trav\u00e9s del aislamiento de Hyper-V (WSL). </li> <li>B\u00e1sicamente activas un Kernel Linux en Windows y por tanto en Windows s\u00ed puedes generar contenedores de Linux.  </li> </ul> <ul> <li> <p>Cada contenedor ocupa mucho menos espacio, puesto que se ahorra todo los ficheros del sistema del sistema operativo que ahora recoge de la m\u00e1quina anfitriona.</p> </li> <li> <p>Su objetivo no es simular un sistema operativo completo, sino un servicio/aplicaci\u00f3n en concreto, por tanto aqu\u00ed tambi\u00e9n se produce un ahorro de espacio en disco.</p> <p>\ud83d\udca5 Aunque un \u00fanico contenedor puede emular varios servicios/aplicaciones es habitual tener varios contenedores y cada uno que tenga \u00fanicamente corriendo 1 servicio/  aplicaci\u00f3n y las dependencias que se necesitan para que \u00e9ste funcione.</p> </li> <li> <p>Arranca mucho m\u00e1s r\u00e1pido que una m\u00e1quina virtual, pues utiliza los procesos y ficheros del sistema del anfitri\u00f3n, el cual ya se encuentra arrancado.</p> </li> <li> <p>Docker es integrable con servicios en la nube:</p> <p>\ud83d\udca5 AWS (Amazon Web Service).</p> <p>\ud83d\udca5 Azure (Microsoft).</p> <p>\ud83d\udca5 Google Cloud.</p> </li> <li> <p>Docker es un software que permite la creaci\u00f3n y gesti\u00f3n de contenedores. </p> </li> </ul>"},{"location":"0_MaquinasContenedores.html","title":"M\u00e1quinas virtuales y Contenedores.","text":""},{"location":"0_MaquinasContenedores.html#que-es-la-virtualizacion","title":"\u00bfQu\u00e9 es la virtualizaci\u00f3n?","text":"<p>Permite reservar una serie de recursos del sistema (RAM, CPU, DISCO) para emular un sistema operativo (guest  / invitado) dentro de otro (host / anfitri\u00f3n).</p> <p>Ventajas:</p> <ul> <li>Podemos aprovechar mejor el hardware de la m\u00e1quina anfitriona, ya que estamos ejecutando varios \"ordenadores\" en uno mismo, aprovechando recursos que de otra forma es posible que no se llegaran a usar.</li> <li>Permite ejecutar software que quiz\u00e1 sea incompatible con tu sistema operativo anfitri\u00f3n, ya sea por un motivo de versiones o porque son sistemas operativos diferentes (Windows, Linux, MAC).</li> </ul>"},{"location":"0_MaquinasContenedores.html#que-es-un-hipervisor","title":"\u00bfQu\u00e9 es un Hipervisor?","text":"<p>El hipervisor es la parte software que permite crear y gestionar las m\u00e1quinas virtuales (asignar recursos, crear los discos virtuales, etc). </p> <p>Se distinguen dos tipos:</p> <p>Hipervisores de tipo 1 (hipervisores bare metal):</p> <ul> <li> <p>No necesitan de un sistema operativo anfitri\u00f3n para comunicarse con los componentes del ordenador, por tanto la comunicaci\u00f3n entre las m\u00e1quinas virtuales y los componentes es m\u00e1s directa, r\u00e1pida y eficiente. Es decir, si una m\u00e1quina virtual necesita hacer una operaci\u00f3n, se comunicar\u00e1 con el hipervisor y \u00e9ste con la CPU. </p> </li> <li> <p>Ejemplos: VMWare ESXi, KVM, Hyper-V</p> </li> </ul> <p>Hipervisores de tipo 2 (hipervisores alojados):</p> <ul> <li> <p>Son una aplicaci\u00f3n m\u00e1s del sistema operativo instalado en la m\u00e1quina y el hipervisor accede al hardware de la m\u00e1quina a trav\u00e9s de ese sistema operativo. Por tanto, si una m\u00e1quina virtual requiere hacer una operaci\u00f3n, pasar\u00e1 la orden al hipervisor, \u00e9ste al sistema operativo y de ah\u00ed a la CPU.</p> </li> <li> <p>Ejemplos: VirtualBox y VMWare Workstation.</p> </li> </ul>"},{"location":"0_MaquinasContenedores.html#que-es-un-contenedor","title":"\u00bfQu\u00e9 es un Contenedor?","text":"<ul> <li> <p>Los contenedores, a diferencia de las m\u00e1quinas virtuales, comparten el kernel, archivos binarios y librer\u00edas del sistema operativo (anfitri\u00f3n).</p> <p>\ud83d\udca5 Por tanto un host Linux podr\u00e1 crear contenedores relacionados con Linux, y un host Windows podr\u00e1 crear contenedores Windows.</p> </li> </ul> <p>NOTA</p> <ul> <li>Windows tiene la posibilidad de ejecutar contenedores Linux a trav\u00e9s del aislamiento de Hyper-V (WSL). </li> <li>B\u00e1sicamente activas un Kernel Linux en Windows y por tanto en Windows s\u00ed puedes generar contenedores de Linux.  </li> </ul> <ul> <li> <p>Cada contenedor ocupa mucho menos espacio, puesto que se ahorra todo los ficheros del sistema del sistema operativo que ahora recoge de la m\u00e1quina anfitriona.</p> </li> <li> <p>Su objetivo no es simular un sistema operativo completo, sino un servicio/aplicaci\u00f3n en concreto, por tanto aqu\u00ed tambi\u00e9n se produce un ahorro de espacio en disco.</p> <p>\ud83d\udca5 Aunque un \u00fanico contenedor puede emular varios servicios/aplicaciones es habitual tener varios contenedores y cada uno que tenga \u00fanicamente corriendo 1 servicio/  aplicaci\u00f3n y las dependencias que se necesitan para que \u00e9ste funcione.</p> </li> <li> <p>Arranca mucho m\u00e1s r\u00e1pido que una m\u00e1quina virtual, pues utiliza los procesos y ficheros del sistema del anfitri\u00f3n, el cual ya se encuentra arrancado.</p> </li> <li> <p>Docker es integrable con servicios en la nube:</p> <p>\ud83d\udca5 AWS (Amazon Web Service).</p> <p>\ud83d\udca5 Azure (Microsoft).</p> <p>\ud83d\udca5 Google Cloud.</p> </li> <li> <p>Docker es un software que permite la creaci\u00f3n y gesti\u00f3n de contenedores. </p> </li> </ul>"},{"location":"10_Argumentos.html","title":"Argumentos.","text":"<p>Un argumento es un par\u00e1metros que se le pasa a una funci\u00f3n o a un programa. Es decir, son variables de entrada. Puede haber m\u00e1s de uno o ninguno.</p> <p> <p>Script con argumentos</p> <p>./script.sh arg1 arg2 arg3 \u2026 argN</p> <p></p>"},{"location":"10_Argumentos.html#ejemplo","title":"Ejemplo:","text":"<p>Ejecutamos el mismo script con diferentes argumentos, dando salidas distintas.</p> <ul> <li> <p>Se puede acceder al contenido de cada uno de los argumentos usando $X donde \u201cX\u201d es la posici\u00f3n del argumento (primero, segundo, tercero, ...).</p> </li> <li> <p>$0: Es el nombre del script \u2192 soyUnScript.sh.</p> </li> <li> <p>$*: Una lista con todos los argumentos \u2192 salva 1010 \"Salva Serrano\" /home/Salva /bin/bash.</p> </li> <li> <p>$#: N\u00famero de argumentos \u2192 5.</p> </li> <li> <p>shift: Elimina el argumento uno ($1) y promueve una posici\u00f3n al resto de argumentos, es decir, lo que antes era $2 ahora ser\u00e1 $1.</p> </li> </ul>"},{"location":"10_Argumentos.html#ejemplo-1","title":"Ejemplo 1.","text":"<p> <p>Script con argumentos</p> <p>./soyUnScript.sh salva 1010 \"Salva Serrano\" /home/Salva /bin/bash</p> <p></p> <p> Variable  Contenido  <code>$0</code> soyUnScript.sh <code>$1</code> salva <code>$2</code> 1010 <code>$3</code> Salva Serrano <code>$4</code> /home/Salva <code>$5</code> /bin/bash <code>$*</code> salva 1010 \"Salva Serrano\" /home/Salva /bin/bash <code>$#</code> 5 <p></p> <ul> <li>Los argumentos van separados por espacios y en caso de insertar un metacaracter, como por ejemplo asterisco (*), es necesario escaparlo con \\:</li> </ul> <p> <p>Escapar car\u00e1cteres especiales</p> <p>./soyUnScript.sh 5 \\* 10</p> <p></p>"},{"location":"10_Argumentos.html#ejemplo-de","title":"Ejemplo de $#.","text":"<pre><code>if [ $# -eq 3 ]\nthen\necho \"Se han insertado 3 argumentos.\"\nelse\necho \"Por favor, inserte 3 argumentos.\"\nfi\n</code></pre>"},{"location":"10_Argumentos.html#ejemplo-shift","title":"Ejemplo Shift.","text":"<p>Se puede observar como $1 va a ir valiendo cada uno de los argumentos.</p> <pre><code>echo \"El primer argumento es: $1\"\nshift\necho \"Ahora el primer argumento es: $1\"\nshift\necho \"Ahora el primer argumento es: $1\"\n</code></pre>"},{"location":"10_Argumentos.html#videos-de-ejemplo","title":"V\u00eddeos de Ejemplo.","text":"<ol> <li>Ejemplos de Argumentos.</li> </ol>"},{"location":"11_Case%20-%20copia.html","title":"Estructura CASE","text":"<p>Estructura parecida al \ud83d\udd00 IF.</p> <p>Va realizando comprobaciones y cuando una coincida, realiza una serie de acciones programadas y finaliza la condici\u00f3n.</p> <ul> <li> <p>Cada opci\u00f3n debe ir finalizada de par\u00e9ntesis \u201c)\u201d.</p> </li> <li> <p>Cada acci\u00f3n debajo de cada condici\u00f3n debe ir finalizada de doble punto y coma \u201c;;\u201d</p> </li> <li> <p>Con el metacaracter \u201c\u201d conseguimos que coincida cualquier cosa, por lo que siempre se cumplir\u00e1 la condici\u00f3n. Es equivalente al \u201celse\u201d*.</p> </li> <li> <p>Se puede hacer uso de expresiones regulares.</p> </li> <li> <p>Se debe usar \u201cesac\u201d para finalizar la estructura.</p> </li> </ul>"},{"location":"11_Case%20-%20copia.html#ejemplo-1-ejemplo-de-un-menu","title":"Ejemplo 1. Ejemplo de un Men\u00fa.","text":"<pre><code>echo \"1. Agregar Usuario.\"\necho \"2. Eliminar Usuario.\"\necho \"3. Bloquear Usuario.\"\necho \"4. Salir.\"\n\nread -p \"Elige una opcion: \" opcion\n\ncase $opcion in\n\"1\")\necho \"Has elegido la opcion 1\"\necho \"Ahora creariamos el usuario\";;\n\"2\")\necho \"Has elegido la opcion 2, vamos a eliminar al usuario\";;\n\"3\")\necho \"Has elegido la opcion 3 ...\";;\n\"4\")\nexit;;\n*)\necho \"El usuario ha insertado cualquier otra cosa.\"\nesac\n</code></pre>"},{"location":"11_Case%20-%20copia.html#ejemplo-2-multiples-lineas-de-ejecucion-por-opcion","title":"Ejemplo 2. M\u00faltiples l\u00edneas de ejecuci\u00f3n por opci\u00f3n.","text":"<p>Es importante que quede claro que podemos a\u00f1adir varios comandos/acciones por cada opci\u00f3n, como se puede ver en el siguiente ejemplo en las opciones 0) y *).</p>"},{"location":"11_Case%20-%20copia.html#ejemplo-3-el-uso-de-operadores-binarios-en-el-case","title":"Ejemplo 3. El uso de operadores binarios en el case.","text":"<p>Tambi\u00e9n podemos hacer uso de la | para integrar dos opciones posibles, es decir, que tanto si se cumple una u otra se ejecutar\u00e1n los comandos asociadas a esa comprobaci\u00f3n:</p> <p>Por ejemplo en el siguiente ejemplo, la primera comprobaci\u00f3n ser\u00e1 verdadera si nombre vale \u201c\u00e1lvaro\u201d o \u201cpepe\u201d</p>"},{"location":"11_Case%20-%20copia.html#ejemplo-4-el-uso-de","title":"Ejemplo 4. El uso de ;;&amp;.","text":"<p> <p>Con \ud83d\udd00 ;;&amp; \ud83d\udd00 podemos ejecutar m\u00faltiples condiciones</p> <p></p> <ul> <li> <p>Con \u201c;;\u201d le decimos al script que si se cumple esa condici\u00f3n termine la estructura y salga del \u201ccase\u201d (una l\u00ednea despu\u00e9s del esac). </p> </li> <li> <p>Usando \u201c;;&amp;\u201d estamos indicando que en caso de ser cierta esa comprobaci\u00f3n, ejecute las instrucciones asociadas, pero que siga comprobando el resto de opciones y si hay alguna cierta ejecute tambi\u00e9n las acciones asociadas a ella.</p> </li> </ul> <p>En el siguiente ejemplo la primera cl\u00e1usula tiene un \u201c;;&amp;\u201d, por lo que por ejemplo si el usuario selecciona \u201cViernes\u201d se mostrar\u00e1 por pantalla \u201cA estudiar\u201d y posteriormente se mostrar\u00e1 tambi\u00e9n \u201cA descansar\u201d, puesto que seguir\u00e1 comprobando el resto de condiciones de la estructura case.</p>"},{"location":"11_Case.html","title":"Estructura CASE","text":"<p>Estructura parecida al \ud83d\udd00 IF.</p> <p>CASE</p> <pre><code>case VARIABLE in\nOPCION_A)\nACCIONES;;\nOPCION_B)\nACCIONES;;\n*)\nACCIONES;;\nesac\n</code></pre> <p>Va realizando comprobaciones y cuando una coincida, realiza una serie de acciones programadas y finaliza la condici\u00f3n.</p> <ul> <li> <p>Cada opci\u00f3n debe ir finalizada de par\u00e9ntesis \u201c)\u201d.</p> </li> <li> <p>Cada acci\u00f3n debajo de cada condici\u00f3n debe ir finalizada de doble punto y coma \u201c;;\u201d</p> </li> <li> <p>Con el metacaracter \u201c\u201d conseguimos que coincida cualquier cosa, por lo que siempre se cumplir\u00e1 la condici\u00f3n. Es equivalente al \u201celse\u201d*.</p> </li> <li> <p>Se puede hacer uso de expresiones regulares.</p> </li> <li> <p>Se debe usar \u201cesac\u201d para finalizar la estructura.</p> </li> </ul>"},{"location":"11_Case.html#ejemplo-1-ejemplo-de-un-menu","title":"Ejemplo 1. Ejemplo de un Men\u00fa.","text":"<pre><code>echo \"1. Agregar Usuario.\"\necho \"2. Eliminar Usuario.\"\necho \"3. Bloquear Usuario.\"\necho \"4. Salir.\"\n\nread -p \"Elige una opcion: \" opcion\n\ncase $opcion in\n\"1\")\necho \"Has elegido la opcion 1\"\necho \"Ahora creariamos el usuario\";;\n\"2\")\necho \"Has elegido la opcion 2, vamos a eliminar al usuario\";;\n\"3\")\necho \"Has elegido la opcion 3 ...\";;\n\"4\")\nexit;;\n*)\necho \"El usuario ha insertado cualquier otra cosa.\"\nesac\n</code></pre>"},{"location":"11_Case.html#ejemplo-2-multiples-lineas-de-ejecucion-por-opcion","title":"Ejemplo 2. M\u00faltiples l\u00edneas de ejecuci\u00f3n por opci\u00f3n.","text":"<p>Es importante que quede claro que podemos a\u00f1adir varios comandos/acciones por cada opci\u00f3n, como se puede ver en el siguiente ejemplo en las opciones 0) y *).</p>"},{"location":"11_Case.html#ejemplo-3-el-uso-de-operadores-binarios-en-el-case","title":"Ejemplo 3. El uso de operadores binarios en el case.","text":"<p>Tambi\u00e9n podemos hacer uso de la | para integrar dos opciones posibles, es decir, que tanto si se cumple una u otra se ejecutar\u00e1n los comandos asociadas a esa comprobaci\u00f3n:</p> <p>Por ejemplo en el siguiente ejemplo, la primera comprobaci\u00f3n ser\u00e1 verdadera si nombre vale \u201c\u00e1lvaro\u201d o \u201cpepe\u201d</p>"},{"location":"11_Case.html#ejemplo-4-el-uso-de","title":"Ejemplo 4. El uso de ;;&amp;.","text":"<p> <p>Con \ud83d\udd00 ;;&amp; \ud83d\udd00 podemos ejecutar m\u00faltiples condiciones</p> <p></p> <ul> <li> <p>Con \u201c;;\u201d le decimos al script que si se cumple esa condici\u00f3n termine la estructura y salga del \u201ccase\u201d (una l\u00ednea despu\u00e9s del esac). </p> </li> <li> <p>Usando \u201c;;&amp;\u201d estamos indicando que en caso de ser cierta esa comprobaci\u00f3n, ejecute las instrucciones asociadas, pero que siga comprobando el resto de opciones y si hay alguna cierta ejecute tambi\u00e9n las acciones asociadas a ella.</p> </li> </ul> <p>En el siguiente ejemplo la primera cl\u00e1usula tiene un \u201c;;&amp;\u201d, por lo que por ejemplo si el usuario selecciona \u201cViernes\u201d se mostrar\u00e1 por pantalla \u201cA estudiar\u201d y posteriormente se mostrar\u00e1 tambi\u00e9n \u201cA descansar\u201d, puesto que seguir\u00e1 comprobando el resto de condiciones de la estructura case.</p>"},{"location":"12_While_Until.html","title":"Estructuras WHILE y UNTIL","text":""},{"location":"12_While_Until.html#while","title":"While","text":"<p>WHILE<pre><code>while [ CONDICI\u00d3N ]\ndo\nACCIONES\ndone\n</code></pre> </p> <ul> <li> <p>El bucle while se repite mientras la condici\u00f3n sea verdadera.</p> </li> <li> <p>Es posible realizar bucles infinitos que est\u00e1n siempre ejecut\u00e1ndose, por ejemplo haciendo uso de la sentencia \u201ctrue\u201d, la cual siempre hace que la comprobaci\u00f3n sea verdadera.</p> </li> </ul> <p>BUCLE INFINITO<pre><code>while [ true ]\ndo\necho \"BUCLE INFINITO\"\ndone\n</code></pre> </p> <ul> <li>Importante el espacio entre los corchetes y el uso de \u201cdo\u201d y \u201cdone\u201d para crear la estructura.</li> </ul>"},{"location":"12_While_Until.html#ejemplo-1-repite-hasta-que-el-usuario-meta-un-numero-entre-1-y-10","title":"Ejemplo 1. Repite hasta que el usuario meta un numero entre 1 y 10","text":"<pre><code>read -p \"Elige un numero entre 1 y 10\" numero\n\n\nwhile [ $num -lt 1 &amp;&amp; $num -gt 10 ]\ndo\nread -p \"Elige un numero entre 1 y 10\" numero\ndone\n</code></pre>"},{"location":"12_While_Until.html#ejemplo-2-repite-hasta-que-introduzca-un-usuario-valido-en-el-sistema","title":"Ejemplo 2. Repite hasta que introduzca un usuario v\u00e1lido en el sistema.","text":"<pre><code>read -p \"Introduce un usuario: \" usuario\n\ngrep -qw $usuario /etc/passwd\n\nwhile [ $? -ne 0 ]\ndo\nread -p \"Introduce un usuario: \" usuario\n        grep -qw $usuario /etc/passwd\ndone\n</code></pre>"},{"location":"12_While_Until.html#until","title":"Until","text":"<ul> <li> <p>Muy parecido a la estructura while.</p> </li> <li> <p>Se ejecuta mientras la condici\u00f3n sea falsa. </p> </li> <li> <p>Ser\u00eda equivalente a \u201cHasta que no sea cierto XXXX sigue realizando las tareas del bucle\u201d.</p> </li> </ul>"},{"location":"12_While_Until.html#ejemplo-no-termina-hasta-que-a-tenga-el-valor-de-10","title":"Ejemplo. No termina hasta que a tenga el valor de 10.","text":"<pre><code>a=0\nuntil [ $a -eq 10 ]\ndo\nlet \"a=$a+1\"\necho $a\ndone\n</code></pre>"},{"location":"13_For.html","title":"Estructura FOR IN","text":""},{"location":"13_For.html#for-in","title":"FOR IN","text":"<p>FOR IN<pre><code>for VARIABLE in LISTA\ndo\nACCIONES\ndone\n</code></pre> </p> <ul> <li> <p>Permite recorrer una lista.</p> </li> <li> <p>Importante el espacio entre los corchetes y el uso de \u201cdo\u201d y \u201cdone\u201d para crear la estructura.</p> </li> <li> <p>Por defecto se interpreta como un objeto de la lista todo aquello que va separado por un espacio en blanco.</p> </li> <li> <p>Usaremos una variable y en cada iteraci\u00f3n dicha variable tendr\u00e1 un valor de la lista.</p> </li> </ul> <p>Iteraci\u00f3n<p>Se refiere a cada vez que se va ejecutando el bucle. La primera ejecuci\u00f3n con el primer objeto de la lista es la primera iteraci\u00f3n, la segunda vez ser\u00e1 la segunda iteraci\u00f3n, y as\u00ed sucesivamente.</p> </p>"},{"location":"13_For.html#ejemplos-de-listas","title":"Ejemplos de listas.","text":""},{"location":"13_For.html#ejemplo-de-lista-usando-literales","title":"Ejemplo de lista usando literales.","text":"<pre><code>iteracion=1\nfor nombres in Salva Pepe Juan Domingo\ndo\necho \"En la iteracion $iteracion la variable vale $nombres\"\nlet iteracion=$iteracion+1\ndone\n</code></pre>"},{"location":"13_For.html#ejemplo-de-lista-usando-variables","title":"Ejemplo de lista usando variables.","text":"<pre><code>directorios=`ls`\niteracion=1\nfor nombres in $directorios\ndo\necho \"El directorio en la iteracion $iteracion es $nombres\"\nlet iteracion=iteracion+1\ndone\n</code></pre>"},{"location":"13_For.html#ejemplo-de-lista-usando-comandos","title":"Ejemplo de lista usando comandos.","text":"<pre><code>iteracion=1\nfor nombres in `ls`\ndo\necho \"El directorio en la iteracion $iteracion es $nombres\"\nlet iteracion=iteracion+1\ndone\n</code></pre>"},{"location":"13_For.html#ejemplos-genericos","title":"Ejemplos gen\u00e9ricos.","text":""},{"location":"13_For.html#ejemplos-usando-el-comando-seq","title":"Ejemplos usando el comando seq.","text":"<pre><code>for numero in `seq 1 10`\ndo\necho \"Ahora la variable numero vale $numero\ndone\n</code></pre>"},{"location":"13_For.html#ejemplos-con-un-for-anidado","title":"Ejemplos con un for anidado.","text":"<pre><code>filas=5\ncolumnas=5\nfor fila in `seq 1 $filas`\ndo\nfor col in `seq 1 $columnas`\ndo\necho -n \"*\"\ndone\n#Para saltar de linea.\necho\ndone\n</code></pre>"},{"location":"13_For.html#ejemplo-recorriendo-un-fichero-sin-espacios-en-blanco","title":"Ejemplo recorriendo un fichero SIN espacios en blanco.","text":"<pre><code>#Solo nos quedamos con los primeros 3 campos porque el 4 de informacion personal\n#puede contener espacios\nfor linea in `cat /etc/passwd | cut -d':' -f1-3`\ndo\n#Nos quedamos con el nombre de usuario y su uid.\nuserID=`echo $linea | cut -d':' -f3`\nusuario=`echo $linea | cut -d':' -f1`\n#Si su UID es mayor de 1000 y menor de 65534 es un usuario normal.\nif [[ $userID -ge 1000 &amp;&amp; $userID -lt 65534 ]]\nthen\necho \"$usuario es un usuario normal\"\nfi\ndone\n</code></pre>"},{"location":"13_For.html#ejemplo-recorriendo-un-fichero-con-espacios-en-blanco-usando-ifs","title":"Ejemplo recorriendo un fichero CON espacios en blanco usando IFS.","text":"<p> <p>Cambiar el IFS<p>IFS=$'{\\n}'</p> </p> <p></p> <ul> <li> <p>El IFS es el separador por defecto del sistema.</p> </li> <li> <p>Existe la variable de entorno $IFS que nos indica cu\u00e1l es.</p> </li> <li> <p>Podemos modificarla dentro de nuestro script como cualquier variable \ud83d\udd00 IFS=$'{\\n}'</p> </li> <li> <p>Por defecto el IFS es el espacio en blanco, por esa raz\u00f3n cada objeto de una lista est\u00e1 separado por un espacio en blanco.</p> </li> </ul> <p>En el siguiente ejemplo cambiamos el IFS al salto de l\u00ednea, de esta forma cada iteraci\u00f3n coge una linea entera.</p> <pre><code>IFS=$'{\\n}'\n\nfor linea in `ls -l | tr -s ' '`\ndo\necho $linea\ndone\n</code></pre>"},{"location":"13_For.html#video-de-ejemplo","title":"V\u00eddeo de Ejemplo.","text":"<ol> <li>V\u00eddeo Ejemplo Estructura For in</li> </ol>"},{"location":"14_Break.html","title":"Exit, Break y Continue","text":""},{"location":"14_Break.html#exit","title":"Exit.","text":"<p> <p>EXIT<p>El comando exit finaliza el script.</p> </p> <p></p>"},{"location":"14_Break.html#break","title":"Break","text":"<p> <p>BREAK<p>El comando \"break\" nos saca de un bucle.</p> </p> <p></p> <ul> <li> <p>Nos permite dar por finalizado un bucle (while, until o for).</p> </li> <li> <p>En caso de tener un bucle anidado, podemos usar break X para romper y salir de X bucles.</p> </li> <li> <p>No hay que confundirlo con exit, el  comando exit termina el programa, mientras que break finaliza el bucle en el que est\u00e1 pero continua el programa.</p> </li> </ul>"},{"location":"14_Break.html#ejemplo-break","title":"Ejemplo Break.","text":"<pre><code>#En el siguiente ejemplo hay un bucle que va desde 0 a 100 incrementando de 1 en 1. \n#No obstante, cuando llega al n\u00famero indicado por el usuario se sale del bucle for y contin\u00faa.\nread -p \"Escribe un numero del 1 al 100: \" num\n\nfor x in `seq 1 $num`\ndo\necho $x\nif [ $x -eq $num ]\nthen\necho \"Ya he llegado al numero $num\"\nbreak\nfi\ndone\necho\necho \"El programa no ha terminado.\"\necho \"Simplemente se ha salido del bucle mediante el break.\"\n</code></pre>"},{"location":"14_Break.html#continue","title":"Continue","text":"<p> <p>CONTINUE<p>El comando \"continue\" manda el programa directamente a la siguiente iteraci\u00f3n.</p> </p> <p></p>"},{"location":"14_Break.html#ejemplo-continue","title":"Ejemplo Continue","text":"<pre><code>#En este ejemplo se recorre del 1 al 10 y no se muestra nada para el valor de 5.\nfor x in `seq 1 10`\ndo\nif [ $x -eq 5 ]\nthen\ncontinue\nfi\n\necho \"Vamos a mostrar todos los numeros menos el 5: $x\"\ndone\n</code></pre>"},{"location":"15_DockerVolumenes.html","title":"Vol\u00famenes en Docker.","text":"<ul> <li>Un contenedor por defecto no tiene persistencia.</li> </ul> <p> <p>PERSISTENCIA<p>Se entiende por contenedor persistente que aquel contenedor que almacene los datos incluso despu\u00e9s de haber sido borrado dicho contenedor.</p> <p>Es decir, si borramos un contenedor persistente podr\u00edamos continuar con todos nuestros datos al recrearlo.</p> </p> <p></p> <p>Para que se guarden tenemos 3 opciones:</p>"},{"location":"15_DockerVolumenes.html#montajes-tmpfs","title":"Montajes \u201ctmpfs\u201d:","text":"<p>\u26a1 Los datos generados por el contendor se almacenan en el sistema operativo. Al detener el contenedor, se borran dichos datos.</p> <p>\u26a1Solo funciona en sistemas Linux.</p>"},{"location":"15_DockerVolumenes.html#directorios-enlazados-bind","title":"Directorios Enlazados (bind):","text":"<p>\u26a1 La informaci\u00f3n se guarda fuera del servicio Docker, es decir, en una carpeta enlazada de nuestra m\u00e1quina anfitriona. </p> <p>\u26a1 Ventaja: Podemos modificar los ficheros siendo propietarios de ellos, sin pasar por el servicio de docker y evitando posibles problemas de permisos. </p> <p>\u26a1 Desventaja: No se puede hacer uso de los comandos del servicio docker para gestionarlo. Un montaje bind en linux no se puede usar en Windows y viceversa. </p>"},{"location":"15_DockerVolumenes.html#ejemplo","title":"Ejemplo.","text":"<p>Todo lo que creemos en el /home de nuestro contenedor se guarda en la carpeta actual ($pwd).</p> <pre><code>docker run -d -it --name volbind  --mount type=bind,source=$(pwd),target=/home ubuntu </code></pre>"},{"location":"15_DockerVolumenes.html#volumenes","title":"Vol\u00famenes:","text":"<p>\u26a1 La informaci\u00f3n se guarda dentro del servicio Docker, lo que nos permite mayor flexibilidad y facilidad a la hora de ser gestionados por el propio servicio (usar comandos del terminal de docker).</p> <p>\u26a1 Podemos pasar un volumen entre Linux / Windows.</p> <p>\u26a1 Es la forma m\u00e1s habitual de trabajar.</p> <p>\u26a1 Podemos hacer uso de los comandos \"docker volume XXX\" para gestionarlos.</p>"},{"location":"15_DockerVolumenes.html#ejemplo_1","title":"Ejemplo.","text":"<p> <p>MOUNT</p> <p>Podemos hacer uso tanto de -v como de - -mount para crear vol\u00famenes en docker.</p> <p></p> <p>Se ha creado un volumen \"miVol\" que apunta a /home del contenedor.</p> <pre><code>docker run -d -it --name ejemploVol -v miVol:/home ubuntu\n</code></pre> <pre><code>docker run -d -it --name ejemploVol --mount source=miVol,target=/home ubuntu\n</code></pre> <p>Si ahora realizo los siguientes pasos:</p> <pre><code>1. Crear un fichero en el /home del contenedor.\n\n2. Borrar el contenedor.\n\n3. Crear otro contenedor usando el mismo volumen.\n</code></pre> <p>\u26a1 Tras estos pasos el nuevo contenedor seguir\u00e1 almancenando todos mis ficheros del anterior contenedor. </p> <p>\u26a1 Los datos del /home de contenedor se est\u00e1n guardando realmente en la m\u00e1quina anfitriona.</p>"},{"location":"16_EjemploDocker_WP.html","title":"Ejemplo WP usando Docker.","text":"<ul> <li>En dockerhub podemos buscar el contenedor oficial del wordpress y ver toda su posible configuraci\u00f3n: DockerHUB Wordpress.</li> <li>El servidor WP necesitamos un gestor de bases de datos para almacenar la informaci\u00f3n de la web.</li> </ul>"},{"location":"16_EjemploDocker_WP.html#crear-la-base-de-datos","title":"Crear la Base de Datos.","text":"<p>La base de datos para wordpress puede ser MySQL o MariaDB.</p> <p>Vamos a crearla mediante un volumen que almacene todo lo guardado en el servicio mysql (/var/lib/mysql)</p> <pre><code>docker run -d --name WP_BaseDatos \\\n--mount source=BD_VOL,target=/var/lib/mysql \\\n-e MYSQL_ROOT_PASSWORD=123 \\\n-e MYSQL_DATABASE=wordpress \\\n-e MYSQL_USER=salva \\\n-e MYSQL_PASSWORD=123 mariadb\n</code></pre>"},{"location":"16_EjemploDocker_WP.html#crear-el-wp-y-asociarlo-a-la-bd","title":"Crear el WP y asociarlo a la BD","text":"<p>Primero creamos la carpeta donde se almacenar\u00e1n los ficheros web del servicio wordpress.</p> <p><pre><code>#Creamos un directorio que ser\u00e1 el que liguemos a nuestro servidor WP.\nmkdir -p /home/usuario/wordpress/ficheros\ncd /home/usuario/wordpress\n</code></pre> <p>OPCIONES</p> <ul> <li>link: Se usa para enlazar con el contenedor WP_BaseDatos que es nuestra base de datos.</li> <li>p: Sirve para redirigir todo el tr\u00e1fico del puerto 1234 de la m\u00e1quina anfitriona al puerto 80 (web) del contenedor.</li> </ul> <p></p> <pre><code>#Nos situamos en dicho directorio para que haga uso del volumen bind.\ndocker run -d --name WP \\\n--link WP_BaseDatos:mysql \\\n--mount type=bind,source=/home/usuario/wordpress/ficheros,target=/var/www/html \\\n-e WORDPRESS_DB_USER=salva \\\n-e WORDPRESS_DB_PASSWORD=123 \\\n-p 1234:80 \\\nwordpress\n</code></pre>"},{"location":"1_ComandosDocker.html","title":"Comandos B\u00e1sicos en Docker","text":""},{"location":"1_ComandosDocker.html#comandos","title":"Comandos.","text":"<p>Crear un contenedor</p> <p> \ud83d\udd25 docker [ run | start | stop | restart ] [OPCIONES] [contenedor] \ud83d\udd25 </p> Argumentos  Funci\u00f3n  <code>run</code> Crea y arranca un contenedor --&gt; Si lo ejecutas varias veces ejecutas varios contenedores. <code>start | stop |restart</code> Arranca/Detiene/Reinicia un contenedor ya existente. <code>-d</code> Arranca en segundo plano. <code>-p</code> Traducci\u00f3n de puertos entre el contenedor y la m\u00e1quina anfitriona. Solo se puede hacer a la hora de crear la m\u00e1quina. <code>--name</code> Nombre de la m\u00e1quina. <code>-it</code> Redirige la salida al terminal del contenedor, es decir, accedes al terminal del contenedor. <p>Si nos fijamos en la salida vemos que lo primero que hace es buscar la imagen \u201chello-world\u201d en local, al no encontrarlo, lo descarga de un repositorio de docker y posteriormente lo ejecuta.  Si lo ejecut\u00e1is una segunda vez el c\u00f3digo ya se ejecutar\u00e1 directamente en local (/var/lib/docker/). Tambi\u00e9n podemos apreciar que la imagen que se carga es \u201chello-world:latest\u201d, es decir, la \u00faltima versi\u00f3n de la imagen del contenedor.</p> <p>Mostrar los contenedores del sistema, tanto parados como activos</p> <p> \ud83d\udd25 docker ps [opciones] \ud83d\udd25 </p> <p>\u2728 Con \u2013a se muestran todos los contenedores, los activos y los detenidos.</p> <p>\u2728 Una vez sabemos su \u201cnombre\u201d o su \u201cID\u201d podemos arrancarlo/pararlo/reiniciarlo.</p> <p>Copiar o renombrar contenedores.</p> <p> \ud83d\udd25 docker [ cp |rename ] [contenedor] \ud83d\udd25  </p> <p>Ejecutar comandos dentro del contenedor</p> <p> \ud83d\udd25 docker exec [OPCIONES] NombreContenedor Comando [ArgumentosComando] \ud83d\udd25 </p> <p>\u2728 -d: Ejecuta en segundo plano.</p> <p>\u2728-it: Enlaza la entrada y salida a nuestro terminal. Es como entrar al terminal del contenedor.</p> <p>Acceder a los logs de ejecuci\u00f3n del contenedor.</p> <p> \ud83d\udd25 docker logs [OPCIONES] NombreContenedor \ud83d\udd25 </p> <p>Listar todos los contenedores.</p> <p> \ud83d\udd25 docker container ls \u2013a \ud83d\udd25 </p> <p>Eliminar un contenedor</p> <p> \ud83d\udd25 docker container rm NombreContenedor \ud83d\udd25 </p> <p>\u2728 Elimina un contenedor.</p> <p>Crear una imagen a partir de un contenedor</p> <p> \ud83d\udd25 docker commit contenedor imagen \ud83d\udd25 </p> <p>\u2728Crear una imagen de un contenedor es la forma m\u00e1s sencilla para subir nuestro contenedor a la nube o para hacer un backup local.</p>"},{"location":"1_ComandosDocker.html#ejemplos-basicos-en-docker","title":"Ejemplos B\u00e1sicos en Docker","text":"<p>Aviso</p> <p>En los siguientes ejemplos el nombre del contenedor ser\u00e1 Salva.</p> <ul> <li>Crear un contenedor nuevo con la \u00faltima versi\u00f3n de Ubuntu.</li> </ul> <pre><code>docker run -d -it --name Salva ubuntu\n</code></pre> <ul> <li>Acceder al contenedor haciendo uso del int\u00e9rprete /bin/bash.</li> </ul> <pre><code>docker exec -it Salva bash\n</code></pre> <ul> <li>Actualiza los repositorios e instala dentro del contendor.</li> </ul> <pre><code>apt-get update\napt-get install nano iputils-ping net-tools iproute2\n</code></pre> <ul> <li>Det\u00e9n el contenedor desde la m\u00e1quina anfitriona.</li> </ul> <pre><code>docker stop Salva\n</code></pre> <ul> <li>Arranca el contenedor.</li> </ul> <pre><code>docker start Salva\n</code></pre> <ul> <li>Descargar un fichero del contenedor a la m\u00e1quina anfitriona.</li> </ul> <pre><code>docker cp Salva:/home/prueba.txt .\n</code></pre> <ul> <li>Crear una imagen del contendor.</li> </ul> <pre><code>docker commit Salva copiaContendor\n</code></pre> <ul> <li>Lista las imagenes que tienes en el sistema</li> </ul> <pre><code>docker images\n</code></pre> <ul> <li>Crea un .tar de la imagen copiaContendor.</li> </ul> <pre><code>docker image save -o /home/usuario/backup.tar copiaContendor\n</code></pre> <ul> <li>Saca la imagen del .tar y vu\u00e9lcala en un contenedor. Recuerda estar en el mismo directorio que el .tar.</li> </ul> <pre><code>docker load -i backup.tar\ndocker run -d -it --name NuevoContenedor copiaContendor\n</code></pre>"},{"location":"1_ComandosDocker.html#como-trabajar-en-clasecasa-usando-docker","title":"\u00bfC\u00f3mo trabajar en clase/casa usando docker?","text":"<p>Muchos de vosotros hac\u00e9is uso de Windows en casa, por lo que os puede entrar dudas de c\u00f3mo podemos llevar nuestro trabajo a casa para seguir con \u00e9l.</p> <p>Existen dos opciones explicadas en los siguientes v\u00eddeos:</p> <ol> <li> <p>Guardarnos las im\u00e1genes en un USB.</p> </li> <li> <p>Subir las im\u00e1genes a Docker HUB..</p> </li> </ol>"},{"location":"2_EjemplosDocker%20-%20copia.html","title":"Ejemplos B\u00e1sicos en Docker","text":"<p>Aviso</p> <p>En los siguientes ejemplos el nombre del contenedor ser\u00e1 Salva.</p> <ul> <li>Crear un contenedor nuevo con la \u00faltima versi\u00f3n de Ubuntu.</li> </ul> <pre><code>docker run -d -it --name Salva ubuntu\n</code></pre> <ul> <li>Acceder al contenedor haciendo uso del int\u00e9rprete /bin/bash.</li> </ul> <pre><code>docker exec -it Salva bash\n</code></pre> <ul> <li>Actualiza los repositorios e instala dentro del contendor.</li> </ul> <pre><code>apt-get update\napt-get install nano iputils-ping net-tools iproute2\n</code></pre> <ul> <li>Det\u00e9n el contenedor desde la m\u00e1quina anfitriona.</li> </ul> <pre><code>docker stop Salva\n</code></pre> <ul> <li>Arranca el contenedor.</li> </ul> <pre><code>docker start Salva\n</code></pre> <ul> <li>Descargar un fichero del contenedor a la m\u00e1quina anfitriona.</li> </ul> <pre><code>docker cp Salva:/home/prueba.txt .\n</code></pre> <ul> <li>Crear una imagen del contendor.</li> </ul> <pre><code>docker commit Salva copiaContendor\n</code></pre> <ul> <li>Lista las imagenes que tienes en el sistema</li> </ul> <pre><code>docker images\n</code></pre> <ul> <li>Crea un .tar de la imagen copiaContendor.</li> </ul> <pre><code>docker image save -o /home/usuario/backup.tar copiaContendor\n</code></pre> <ul> <li>Saca la imagen del .tar y vu\u00e9lcala en un contenedor. Recuerda estar en el mismo directorio que el .tar.</li> </ul> <pre><code>docker load -i backup.tar\ndocker run -d -it --name NuevoContenedor copiaContendor\n</code></pre>"},{"location":"3_Clase.html","title":"\u00bfC\u00f3mo trabajar en clase/casa usando docker?","text":"<p>Muchos de vosotros hac\u00e9is uso de Windows en casa, por lo que os puede entrar dudas de c\u00f3mo podemos llevar nuestro trabajo a casa para seguir con \u00e9l.</p> <p>Existen dos opciones explicadas en los siguientes v\u00eddeos:</p> <ol> <li> <p>Guardarnos las im\u00e1genes en un USB.</p> </li> <li> <p>Subir las im\u00e1genes a Docker HUB..</p> </li> </ol>"},{"location":"4_Scripts.html","title":"Scripts en Linux.","text":""},{"location":"4_Scripts.html#creacion-de-scripts","title":"Creaci\u00f3n de Scripts.","text":"<ul> <li>\u00bfD\u00f3nde creo mis scripts?</li> </ul> <p>Lo primero que debemos preguntarnos es d\u00f3nde vamos a crear el script. Si empezamos a crear el script en un directorio donde no tenemos permisos de escritura no nos dejar\u00e1 guardar los cambios y nuestro trabajo ser\u00e1 en vano.</p> <ul> <li>\u00bfCon qu\u00e9 creo mis scripts?</li> </ul> <p>Para la creaci\u00f3n de scripts usaremos el editor de texto nano:</p> <p> Controles  Funcionamiento  <code>nano \u201cNombreFichero\u201d.sh</code> Genera o Abre el fichero para su edici\u00f3n. <code>Control + o</code> Guardar Cambios. <code>Control + x</code> Salir. <code>Control + _</code> Ir a una l\u00ednea. <code>Alt + U</code> Deshacer. <code>Alt + E</code> Rehacer. <p></p> <p>En la leyenda \u201c^\u201d equivale a \u201cControl\u201d y \u201cM-\u201c equivale a \u201cAlt\u201d.</p> <ul> <li>\u00bfC\u00f3mo empiezo mis scripts?</li> </ul> <p>Lo primero ser\u00e1 crear el \u201cshebang\u201d  \ud83d\udd00 #!/bin/bash. </p> <p>La funci\u00f3n del shebang es decirle al sistema operativo que cuando le digamos de ejecutar este fichero use el SHELL bash, cuya ubicaci\u00f3n dentro del sistema es /bin/bash. Si vamos a la ruta /bin, veremos que existe un ejecutable llamado \u201cbash\u201d.</p> <ul> <li>\u00bfC\u00f3mo ejecuto mis scripts?</li> </ul> <p>Una vez guardados los cambios debemos darle permisos de ejecuci\u00f3n al fichero, en caso de que estemos trabajando con un script. Es importante solo dar permiso de ejecuci\u00f3n al usuario propietario, si no se puede producir una brecha de seguridad, pues los scripts suelen almacenar/manipular datos/servicios importantes de nuestro servidor. </p> <pre><code>chmod 750 \u201cNombreFichero\u201d.sh\n</code></pre> <p>Una vez hecho, ya podemos ejecutar nuestro script de una de las siguientes formas:</p> <pre><code>./\u201dNombreFichero\u201d.sh\nbash \u201cNombreFIchero\u201d.sh\n</code></pre> <p>Warning</p> <p>No us\u00e9is el comando \u201csh script.sh\u201d donde script.sh es el nombre de vuestro script. Esto fuerza al terminal a usar el shell SHELL, y nosotros vamos a usar BASH. Por lo que en ciertos comandos nos dar\u00e1 error al usar SHELL. </p>"},{"location":"4_Scripts.html#comentarios","title":"Comentarios","text":"<p>Importante el uso de comentarios para poder describir que hace cada parte del c\u00f3digo, tanto de cara a vosotros como de cara a compa\u00f1eros de trabajo que vayan a modificar tu c\u00f3digo.</p> <p>Para ello se usa \ud83d\udd00 \u201c#\u201d:</p>"},{"location":"5_Variables.html","title":"Variables en BASH","text":""},{"location":"5_Variables.html#como-creo-una-variable","title":"\u00bfC\u00f3mo creo una variable?","text":"<p>Siempre que creemos una variable debemos hacer uso del \u201c=\u201d sin espacios en blanco.</p> <ul> <li>Los textos \ud83d\udd00 comillas dobles.</li> <li>Los n\u00fameros \ud83d\udd00 sin comillas dobles.</li> </ul> <p>Variables de cadenas de texto \ud83d\udd00 Con comillas dobles.</p> <p>Variables que contienen el valor de un comando \ud83d\udd00 Usando comillas abiertas.</p> <p>Variables compuestas de otras variables.</p>"},{"location":"5_Variables.html#como-muestro-por-pantalla-una-variable","title":"\u00bfC\u00f3mo muestro por pantalla una variable?","text":"<p>Haciendo uso del s\u00edmbolo del dolar \ud83d\udd00 \u201c$\u201d.</p> <p>Podemos hacer uso de la opci\u00f3n \u201cecho \u2013n\u201d para mostrar varias salidas en la misma l\u00ednea.</p> <p>Con la opci\u00f3n \u201cecho \u2013e\u201d puedo hacer uso de caracteres especiales con la contrabarra:</p> <p>\ud83d\udd00 \\n  Salto de l\u00ednea.</p> <p>\ud83d\udd00 \\t  Tabulador.</p>"},{"location":"5_Variables.html#como-recojo-informacion-del-usuario","title":"\u00bfC\u00f3mo recojo informaci\u00f3n del usuario?","text":"<p>Con el comando \u201cread\u201d podemos recoger lo que escriba el usuario por terminal y guardarlo en una variable.</p> <p>Podemos hacerlo todo en la misma l\u00ednea con read \u2013p:</p>"},{"location":"5_Variables.html#videos-de-repaso","title":"V\u00eddeos de repaso.","text":"<p>V\u00eddeos de repaso sobre scripts y variables:</p> <ol> <li> <p>Repaso de Scripts y Variables.</p> </li> <li> <p>Ejemplos de uso de Variables..</p> </li> </ol>"},{"location":"6_Aritmetica.html","title":"Operaciones Matem\u00e1ticas.","text":""},{"location":"6_Aritmetica.html#operaciones","title":"Operaciones","text":"<p> S\u00edmbolo  Significado  <code>*</code> Multiplicaci\u00f3n <code>/</code> Divisi\u00f3n <code>-</code> Resta <code>+</code> Suma <code>%</code> Resto. Ej. 5%2 = 1 <p></p>"},{"location":"6_Aritmetica.html#comandos-aritmeticos","title":"Comandos Aritm\u00e9ticos.","text":"<p>Existen varias posibilidades para realizar operaciones matem\u00e1ticas.</p>"},{"location":"6_Aritmetica.html#1-usando-doble-parentesis","title":"1. Usando doble par\u00e9ntesis:","text":"<pre><code>suma=$(( $x + $y ))\n</code></pre>"},{"location":"6_Aritmetica.html#2-usando-el-comando-let","title":"2. Usando el comando \u201clet\u201d:","text":"<pre><code>#Ejemplo de Multiplicaci\u00f3n:\nlet \"mult = $x * $y\"\n\n#Ejemplo de triplicar un valor:\nlet \u201cmult = $mult * 3\u201d\n\n\n#Ejemplo de incrementar un valor o decrementar:\nlet mult++\nlet mult--\n</code></pre>"},{"location":"6_Aritmetica.html#3-usar-el-comando-expr","title":"3. Usar el comando \u201cexpr\u201d:","text":"<ul> <li>Este comando es m\u00e1s antiguo y tiene el inconveniente de tener que escaparse (a\u00f1adir ) delanta de cada car\u00e1cter especial como *,&lt;,&gt;,(,), etc.</li> </ul> <pre><code>#Ejemplo del uso de * y () escapado (\\)\nexpr 2 \\* 3\nexpr \\( 2 + 2 \\) \\* 3\n</code></pre> <ul> <li>Por contra, expr es \u00fatil para comprobar longitud de cadena de caracteres y sustraer subcadenas.</li> </ul> <pre><code>#Este comando devuelve 10, que es la longitud de la cadena pasada como par\u00e1metro. \n#Tened en cuenta que se contabiliza cada espacio en blanco como una letra.\nexpr length \u201cHola Mundo\u201d\n\n#Desde el car\u00e1cter n.\u00ba 4 (a) devuelve los siguientes 4 caracteres \u2192 \u201ca Mu\u201d\nexpr substr \u201cHola Mundo\u201d 4 4\n\n#. Desde el car\u00e1cter n\u00famero 6, devuelve los siguientes 5 caracteres \u2192 \u201cMundo\u201d\nexpr substr \u201cHola Mundo\u201d 6 5\n</code></pre>"},{"location":"6_Aritmetica.html#4-comando-bc-para-decimales","title":"4. Comando \"bc\" para decimales.","text":"<p>Para trabajar con decimales debemos usar el comando \u201cbc\u201d:</p> <pre><code>operacion=`echo \u201c7.5 * 12.5\u201d | bc `\n</code></pre> <p>Las comillas invertidas devuelven el valor de la operaci\u00f3n o del comando.</p> <p>Para sacar todos los posibles decimales usamos la opci\u00f3n \u201c-l\u201d</p> <pre><code>operacion=`echo \u201c7.5 * 12.5\u201d | bc  -l`\n</code></pre> <p>Si queremos cierto n\u00famero de decimales usamos la opci\u00f3n scale:</p> <pre><code>operacion=`echo \u201cscale=3;7.5 * 12.5\u201d | bc `\n</code></pre>"},{"location":"7_Comparadores.html","title":"Comparadores.","text":""},{"location":"7_Comparadores.html#comparadores-aritmeticos","title":"Comparadores Aritm\u00e9ticos.","text":"<p> Comparador  Significado  <code>-eq</code> Igual a (Equeal to) <code>-ne</code> No Igual (Not Equal) <code>-gt</code> Mayor que (Greater Than) <code>-ge</code> Mayor o igual (Greater or Equal) <code>-lt</code> Menor que (Lower Than) <code>-le</code> Menor o igual (Lower or Equal) <p></p>"},{"location":"7_Comparadores.html#ejemplo-1","title":"Ejemplo 1","text":"<pre><code>if [ $edad -gt 25 ]\nthen\necho \"Tienes m\u00e1s de 25 a\u00f1os.\"\nelse\necho \"Tienes 25 o menos a\u00f1os.\"\nfi\n</code></pre>"},{"location":"7_Comparadores.html#ejemplo-2","title":"Ejemplo 2","text":"<pre><code>if [ $examenes -ne 20 ]\nthen\necho \"No tenemos exactamente 20 ex\u00e1menes entregados, algo ha ido mal\"\nelse\necho \"Han entregado 20 ex\u00e1menes.\"\nfi\n</code></pre>"},{"location":"7_Comparadores.html#ejemplo-3","title":"Ejemplo 3","text":"<pre><code>if [ $memoria -le 100000 ]\nthen\necho \"Quedan 100MB o menos en el sistema.\"\nfi\n</code></pre>"},{"location":"7_Comparadores.html#comparadores-de-archivos","title":"Comparadores de Archivos.","text":"<p> Comparador  Significado  <code>-f</code> Verdadero si es un fichero <code>-e</code> Verdadero si existe <code>-d</code> Verdadero si es un directorio <code>-r</code> Verdadero si tengo permisos de lectura <code>-w</code> Verdadero si tengo permisos de escritura <code>-x</code> Verdadero si tengo permisos de ejecuci\u00f3n <code>-O</code> Verdadero si soy el usuario propietario <code>-G</code> Verdadero si pertenezco al grupo propietario <code>-s</code> Verdadero si el fichero NO est\u00e1 vac\u00edo <code>-L</code> Verdadero si se trata de un enlace simb\u00f3lico <p></p>"},{"location":"7_Comparadores.html#ejemplo-1_1","title":"Ejemplo 1","text":"<pre><code>if [ -e $carpeta ]\nthen\necho \"La carpeta existe, aunque quiz\u00e1 se trate de un fichero.\"\nelse\necho \"La carpeta no existe\"\nfi\n</code></pre>"},{"location":"7_Comparadores.html#ejemplo-2_1","title":"Ejemplo 2","text":"<pre><code>if [ -d $carpeta ]\nthen\necho \"La carpeta existe y se trata seguro de una carpeta.\"\nelse\necho \"La carpeta no existe\"\nfi\n</code></pre>"},{"location":"7_Comparadores.html#ejemplo-3_1","title":"Ejemplo 3","text":"<pre><code>if [ -s $fichero ]\nthen\necho \"El fichero contiene informaci\u00f3n.\"\nelse\necho \"El fichero est\u00e1 vaci\u00f3 y lo voy a borrar.\"\nrm -f $fichero\nfi\n</code></pre>"},{"location":"7_Comparadores.html#comparadores-de-cadenas-variables","title":"Comparadores de cadenas / variables.","text":"<p> Comparador  Significado  <code>=</code> Verdadero si es igual <code>!=</code> Verdadero si es diferente <code>-n</code> Verdadero si la variable tiene contenido <code>-z</code> Verdadero si la variable est\u00e1 vac\u00eda <p></p>"},{"location":"7_Comparadores.html#ejemplo-1_2","title":"Ejemplo 1","text":"<pre><code>if [ $usuario = \"ajc\" ]\nthen\necho \"Bienvenido Alejandro!\"\nelse\necho \"\u00bfQui\u00e9n eres?\"\nread -p \"Introduce tu nombre: \" nombre\nfi\n</code></pre>"},{"location":"7_Comparadores.html#ejemplo-2_2","title":"Ejemplo 2","text":"<pre><code>if [ $salir != \"s\" ]\nthen\necho \"El usuario quiere seguir jugando.\"\nelse\necho \"El usuario quiere continuar jugando.\"\nfi\n</code></pre>"},{"location":"7_Comparadores.html#ejemplo-3_2","title":"Ejemplo 3","text":"<pre><code>if [ -z $respuesta]\nthen\necho \"Hubo alg\u00fan error y se ha recibido una respuesta vac\u00eda\"\nfi\n</code></pre>"},{"location":"8_IF.html","title":"Estructura IF.","text":"<p>Una estructura de programaci\u00f3n IF sirve para generar condiciones:</p> <ul> <li>Si se cumple cierta condici\u00f3n realizaremos una acci\u00f3n, si no, realizaremos otra:</li> </ul> <p>Estructura IF simple</p> <pre><code>if [ CONDICI\u00d3N ]\nthen\nACCIONES\nfi\n</code></pre> <p>Cosas que se deben tener en cuenta:</p> <ul> <li>Hay que dejar un espacio en blanco entre los corchetes.</li> <li>Podemos hacer condiciones usando variables, haciendo uso del $, puesto que queremos comparar su contenido.</li> <li>Es recomendable tabular (indentar) las acciones para que  quede m\u00e1s limpio el c\u00f3digo.</li> <li>Siempre debe terminar la estructura con \u201cfi\u201d</li> </ul> <p>Podemos crear condiciones con alternativas, donde si no se cumple una condici\u00f3n se realiza otra  lista de acciones:</p> <p>Estructura IF ELSE</p> <pre><code>if [ condici\u00f3n ]\nthen\nACCIONES\nelse\nACCIONES\nfi\n</code></pre> <p>Se pueden anidar muchas condiciones diferentes con el elemento \u201celif\u201d:</p> <p>Estructura IF ELSE</p> <pre><code>if [ condici\u00f3n ]\nthen\nACCIONES\nelif [ condici\u00f3n ]\nthen\nACCIONES\nelif [ condici\u00f3n ]\nthen\nACCIONES\nelse\nACCIONES\nfi\n</code></pre>"},{"location":"8_IF.html#ejemplos","title":"Ejemplos.","text":""},{"location":"8_IF.html#ejemplo-1","title":"Ejemplo 1.","text":"<pre><code>read -p  \"Cual es tu nombre? \" nombre\n\nif [ $nombre = \"Salva\" ]\nthen\necho \"Bienvenido Salva\"\nfi\n</code></pre>"},{"location":"8_IF.html#ejemplo-2","title":"Ejemplo 2.","text":"<pre><code>read -p  \"Cual es tu nombre? \" nombre\n\nif [ $nombre = \"Salva\" ]\nthen\necho \"Bienvenido Salva\"\ntouch fichero.txt\nelse\necho \"No eres Bienvenido\"\necho \"AutoDestruccion\"\nrm -f fichero.txt\nfi\n</code></pre>"},{"location":"8_IF.html#ejemplo-3","title":"Ejemplo 3.","text":"<pre><code>read -p  \"Cual es tu nombre? \" nombre\n\nif [ $nombre = \"Salva\" ]\nthen\necho \"Bienvenido Salva\"\ntouch fichero.txt\nelif [ $nombre = \"Pepe\" ]\nthen\necho \"Que tal Pepe?\"\nelse\necho \"No eres Bienvenido\"\necho \"AutoDestruccion\"\nrm -f fichero.txt\nfi\n</code></pre>"},{"location":"8_IF.html#ejemplo-4","title":"Ejemplo 4.","text":"<pre><code>read -p \"Cual es tu edad? \" edad\n\nif [ $edad -ge 33 ]\nthen\necho \"Tienes la edad de Cristo o mas\"\nelse\necho \"Tienes menos que la edad de Cristo\"\nfi\n</code></pre>"},{"location":"8_IF.html#ejemplo-5","title":"Ejemplo 5.","text":"<pre><code>read -p \"Inserta un nombre de archivo: \" fic\n\nif [ -f $fic ]\nthen\necho \"$fic es un fichero\"\nelse\necho \"$fic no es un fichero\"\nfi\n</code></pre>"},{"location":"8_IF.html#ejemplo-6","title":"Ejemplo 6.","text":"<pre><code>read -p \"Inserta un directorio: \" dir\n\nif [ -e $dir ]\nthen\necho \"$dir existe, pero no se si es un directorio.\"\nelse\necho \"$dir no existe.\"\nfi\n</code></pre>"},{"location":"8_IF.html#ejemplo-7","title":"Ejemplo 7.","text":"<pre><code>read -p  \"Indica un ficher o directorio: \" recurso\n\nif [ -f $recurso ]\nthen\necho \"$recurso es un fichero\"\nelif [ -d $recurso ]\nthen\necho \"$recurso es un directorio\"\nelif [ -e $recurso ]\nthen\necho \"$recurso existe pero no es ni un directorio ni un fichero\"\nelse\necho \"El $recurso ni si quiera existe\"\nfi\n</code></pre>"},{"location":"8_IF.html#videos-de-ejemplo","title":"V\u00eddeos de Ejemplo.","text":"<ol> <li>Ejemplos de la Estructura IF.</li> </ol>"},{"location":"9_Operadores_Binarios.html","title":"Operadores Binarios.","text":""},{"location":"9_Operadores_Binarios.html#and","title":"AND.","text":"<ul> <li>Devuelve verdadero cuando las dos expresiones son verdaderas, en otros casos devuelve falso. </li> <li>Se aplica mediante el uso de \u201c&amp;&amp;\u201d.</li> </ul> <p>Ejemplo: El programa compara dos argumentos, y dir\u00e1 si son diferentes de a y b o no.</p> <pre><code>read -p \"Introduce el numero de vidas \" vidas\nread -p \"Introduce el numero de continues \" continues\n\nif [[ $vidas -le 0 &amp;&amp; $continues -le 0 ]]\nthen\necho \"Game Over!\"\nelse\necho \"Continue?\"\nfi\n</code></pre>"},{"location":"9_Operadores_Binarios.html#or","title":"OR.","text":"<ul> <li>El comando OR devuelve verdadero cuando al menos una de sus expresiones se cumple. </li> <li>Se representa usando \u201c||\u201d doble barra vertical.</li> </ul> <pre><code>read -p \"Indica tu nombre \" nombre\n\nif [[ $nombre == \"Salva\" || $nombre == \"Admin\" ]]\nthen\necho \"Bienvenido!\"\nelse\necho \"Usuario Incorrecto\"\nfi\n</code></pre>"},{"location":"9_Operadores_Binarios.html#uso-de-multiples-operadores-binarios","title":"Uso de m\u00faltiples operadores binarios.","text":"<ul> <li>Si quisi\u00e9ramos agregar m\u00e1s de dos operadores binarios, ser\u00eda el mismo proceso:</li> </ul> <pre><code>read -p \"Introduce el numero de vidas \" vidas\nread -p \"Introduce el numero de continues \" continues\nread -p \"Quieres activar las trampas? (s/n)\" trampas\n\nif [[ $vidas -le 0 &amp;&amp; $continues -le 0 &amp;&amp; $trampas = \"s\" ]]\nthen\necho \"Game Over!\"\nelse\necho \"Continue?\"\nfi\n</code></pre> <ul> <li>Si vamos a agrupar diferentes opciones usando varios operadores binarios rodeamos, igual que en las ecuaciones matem\u00e1ticas, con par\u00e9ntesis \u201c(\u201c y \u201c)\u201d.</li> </ul> <pre><code>read -p \"Introduce tu nombre de usuario \" usuario\nread -p \"Introduce tu contrasenya \" pass\n\nif [[ ($usuario = \"Salva\" &amp;&amp; $pass = \"abc1234\") || ($usuario = \"Pepe\" &amp;&amp; $pass=\"4231abc\") ]]\nthen\necho \"Solo Salva y Pepe pueden acceder con su contrasenya\"\nelse\necho \"O no eres ni Salva, ni Pepe o la contrasenya es incorrecta\"\nfi\n</code></pre>"},{"location":"Anexo_ExpresionesRegulares.html","title":"Expresiones Regulares","text":"<p>Las expresiones regulares nos van a ayudar a seleccionar cadenas de texto que contengan un patr\u00f3n.</p> <p> S\u00edmbolo  Significado  <code>*</code> 0 o m\u00e1s repeticiones del car\u00e1cter anterior <code>.</code> Un car\u00e1cter cualquiera, pero \u00fanicamente 1 <code>?</code> Una o ninguna repetici\u00f3n del car\u00e1cter anterior. <code>+</code> El car\u00e1cter anterior se repetir una o m\u00e1s veces. <code>[]</code> Indica una lista de caracteres que se pueden dar. <code>{}</code> Nos permite especificar el n\u00famero de repeticiones. <code>^</code> La l\u00ednea comienza por ... <code>[^...]</code> Todo lo que NO sea ... <code>$</code> La l\u00ednea termina por ... <p></p>"},{"location":"Anexo_ExpresionesRegulares.html#ejemplos","title":"Ejemplos.","text":""},{"location":"Anexo_ExpresionesRegulares.html#ejemplo-del-uso-de","title":"Ejemplo del uso de \".\"","text":"<ul> <li>Se puede observar que da igual lo que se coloque en el lugar del punto, siempre y cuando sea un \u00fanico car\u00e1cter. </li> </ul> <p>Por ejemplo, \u201crXXot\u201d no es seleccionado, en cambio \u201crXot\u201d s\u00ed.</p>"},{"location":"Anexo_ExpresionesRegulares.html#ejemplo-del-uso-de_1","title":"Ejemplo del uso de \"*\"","text":"<ul> <li>En el caso del \u201c*\u201d quiere decir que la letra que le precede, puede estar o no y en caso de estar puede estar el n\u00famero de veces que quiera.</li> </ul> <p>Por tanto en el ejemplo seleccionar\u00e1 todo aquello que empiece por una o m\u00e1s \u201cr\u201d consecutivas o que  no empiece por \u201cr\u201d y directamente muestre \u201coot\u201d.</p>"},{"location":"Anexo_ExpresionesRegulares.html#ejemplo-del-uso-de_2","title":"Ejemplo del uso de \"?\"","text":"<ul> <li>En el caso del \u201c?\u201d, la letra precedente se repetir\u00e1 una o ninguna. Por tanto en el ejemplo NO seleccionar\u00e1 \u201crrrroot\u201d, pero s\u00ed \u201croot\u201d y \u201coot\u201d:</li> </ul>"},{"location":"Anexo_ExpresionesRegulares.html#ejemplo-del-uso-de_3","title":"Ejemplo del uso de \"+\"","text":"<ul> <li>El \u201c+\u201d es parecido al \u201c?\u201d y al \u201c*\u201d, \u00fanicamente que el car\u00e1cter que le precede debe repetirse o una vez o m\u00e1s de una vez. Por tanto en el ejemplo NO seleccionar\u00e1 \u201coot\u201d, puesto que debe repetirse al menos una vez, pero S\u00cd seleccionar\u00e1 \u201croot\u201d, \u201crroot\u201d, \u201crrrrrrroot\u201d, etc.</li> </ul>"},{"location":"Anexo_ExpresionesRegulares.html#ejemplo-del-uso-de_4","title":"Ejemplo del uso de \"[ ... ]\"","text":"<ul> <li>El caso de los corchetes [] es para indicar una lista de valores que se pueden dar. Por ejemplo para indicar que solo se puede introducir un n\u00famero \u2192 [0-9] o para indicar que debe ser una letra [a-zA-Z].</li> </ul>"},{"location":"Anexo_ExpresionesRegulares.html#ejemplo-del-uso-de_5","title":"Ejemplo del uso de \"{}\"","text":"<ul> <li>El caso de las llaves {} tiene habitualmente 3 utilidades:</li> </ul> <p>Especificar exactamente el n\u00famero de repeticiones {N}, es decir una letra se va a repetir necesariamente \u201cN\u201d veces. En el siguiente ejemplo nos cercioraremos de sacar aquellos patrones que sean 9 d\u00edgitos (n\u00fameros de tel\u00e9fono).</p> <p>En el caso de que queramos que tenga N o m\u00e1s repeticiones usaremos {N,} (fijaos en la coma). En el siguiente ejemplo deber\u00e1 componerse una contrase\u00f1a que contiene letras o n\u00famero (no signos) y adem\u00e1s debe tener como m\u00ednimo 8 caracteres. F\u00edjate en que se debe entrecomillar en esta ocasi\u00f3n, puedes entrecomillar siempre ante la duda.</p> <p>En caso de que queramos que tenga entre un n\u00famero especifico de repeticiones usamos {N,M} donde N es el m\u00ednimo y M el m\u00e1ximo de veces que se puede repetir, ambos incluidos.</p>"},{"location":"Anexo_ExpresionesRegulares.html#ejemplo-del-uso-de_6","title":"Ejemplo del uso de \"^\"","text":"<ul> <li>En el caso de \u201c^\u201d, es que la l\u00ednea comience por la cadena o expresi\u00f3n regular indicada:</li> </ul> <p>En este ejemplo busca una contrase\u00f1a que empiece por un n\u00famero, seguido de cualquier cosa (.*).</p>"},{"location":"Anexo_ExpresionesRegulares.html#ejemplo-del-uso-de_7","title":"Ejemplo del uso de \"[^...]\"","text":"<ul> <li>Cuando ponemos \u201c^\u201d dentro de los corchetes act\u00faa como una negaci\u00f3n. En el ejemplo se selecciona las cadenas de texto que NO tengan en ning\u00fan momento n\u00fameros.</li> </ul> <p>En este ejemplo busca una contrase\u00f1a que empiece por un n\u00famero, seguido de cualquier cosa (.*).</p>"},{"location":"Anexo_ExpresionesRegulares.html#ejemplo-del-uso-de_8","title":"Ejemplo del uso de \"$\"","text":"<ul> <li>Con el \u201c$\u201d simplemente indicamos que la l\u00ednea termine de cierta manera:</li> </ul>"},{"location":"Anexo_ExpresionesRegulares.html#expresiones-habituales","title":"Expresiones Habituales.","text":"<p> <p>Cualquier caracter</p> <p>.*</p> <p>El \u201c.\u201d nos da cualquier car\u00e1cter, y el \u201c*\u201d nos dice que cualquier car\u00e1cter se repita 0 o m\u00e1s veces.</p> <p></p> <p> <p>Seleccionar una l\u00ednea exacta</p> <p>^XXXXX$</p> <p>Con la \u201c^\u201d le indicamos que la expresi\u00f3n regular se da a comienzo de l\u00ednea y con \u201c$\u201d indicamos que adem\u00e1s debe terminar la l\u00ednea con la expresi\u00f3n regular. \u201cXXXX\u201d es la expresi\u00f3n regular que queramos usar.</p> <p></p> <p> <p>Seleccionar las l\u00edneas en blanco</p> <p>^$</p> <p>Con esto le estamos diciendo que la l\u00ednea empiece y termine con nada en medio.</p> <p></p>"},{"location":"Anexo_ExpresionesRegulares.html#ejemplos-avanzados","title":"Ejemplos Avanzados.","text":""},{"location":"Anexo_ExpresionesRegulares.html#uids-asignados-a-usuarios-1000-en-adelante","title":"UIDs asignados a usuarios (1000 en adelante).","text":"<pre><code>cat /etc/passwd | cut -d ':' -f3 | grep -wE '^[1-9][0-9]{3,}'\n</code></pre>"},{"location":"Anexo_ExpresionesRegulares.html#comprobar-si-existe-un-usuario","title":"Comprobar si existe un usuario.","text":"<pre><code>grep -E '^salva:' /etc/passwd\n</code></pre>"},{"location":"Anexo_ExpresionesRegulares.html#usuarios-sin-contrasena","title":"Usuarios sin contrase\u00f1a.","text":"<pre><code>sudo grep -E '^.*:!:' /etc/shadow\n</code></pre>"},{"location":"Anexo_ExpresionesRegulares.html#usuarios-bloqueados","title":"Usuarios Bloqueados.","text":"<pre><code>sudo grep -E '^.*:![^:]' /etc/shadow\n</code></pre>"},{"location":"Anexo_ExpresionesRegulares.html#seleccionar-ficheros","title":"Seleccionar ficheros.","text":"<pre><code>ls -l | grep -E ^-\n</code></pre>"},{"location":"Anexo_ExpresionesRegulares.html#expresiones-regulares-y-scripts","title":"Expresiones regulares y Scripts.","text":"<ul> <li> <p>Muchas veces tenemos que comparar si cierta variable cumple cierta expresi\u00f3n regular (MATCH). Para ello, en BASH, podemos hacer uso de \u201c=~\u201d.</p> </li> <li> <p>En el siguiente ejemplo se comprueba si el argumento pasado es un n\u00famero o no.</p> </li> </ul> <pre><code>expresion=\"^[0-9]+$\"\nif [[ $1 =~ $expresion ]]\nthen\necho \"ES UN NUMERO\"\nelse\necho \"NO ES UN NUMERO\"\nfi\n</code></pre> <p>Como se puede comprobar:</p> <ol> <li>Se debe primer asignar la expresi\u00f3n regular usada a una variable.</li> <li>Hacer uso de los dobles corchetes [[ \u2026 ]].</li> <li>Hacer uso del comparador especial =~ para expresiones regulares.</li> </ol>"},{"location":"Anexo_SSH.html","title":"Scripts con SSH y SCP.","text":"<p>Para realizar las pr\u00e1cticas con ssh y scp se debe tener en cuenta:</p> <ul> <li>La m\u00e1quina que ejecuta el script (Servidor) debe tener el paquete sshpass y ssh.</li> <li>El servidor debe tener instalado el paquete openssh-server.</li> <li>Los clientes deben tener instalado el paquete openssh-client.</li> </ul>"},{"location":"Anexo_SSH.html#ssh","title":"SSH.","text":"<p> <p>Estructura SSH<p>ssh usuario@IP Origen Destino</p> </p> <p></p> <p>Vamos a utilizar este servicio para acceder a diferentes equipos, ejecutar comandos en ellos y recoger informaci\u00f3n de \u00e9stos.</p> <p>Es importante tener en cuenta que estamos usando contrase\u00f1as en texto plano (sin cifrar) que es algo totalmente desaconsejado, al igual que acceder al usuario con \"root\". Para hacerlo realmente seguro habr\u00eda que realizarlo con pares de claves (privada/p\u00fablica) que ver\u00e9is en el m\u00f3dulo de servicios/seguridad inform\u00e1tica.</p> <p> <p>INFO<p>Si el usuario es el mismo en servidor y cliente no es necesario especificarlo.</p> </p> <p></p>"},{"location":"Anexo_SSH.html#ejemplo-1-acceder-a-una-maquina-y-devolver-la-informacion-de-un-comando","title":"Ejemplo 1. Acceder a una m\u00e1quina y devolver la informaci\u00f3n de un comando.","text":""},{"location":"Anexo_SSH.html#ejemplo-2-acceder-a-una-maquina-y-ejecutar-varios-comandos-en-el-cliente","title":"Ejemplo 2. Acceder a una m\u00e1quina y ejecutar varios comandos en el cliente.","text":""},{"location":"Anexo_SSH.html#ejemplo-3-ejecutar-comandos-en-un-cliente-y-guardar-la-informacion-devuelta-en-un-fichero-en-el-servidor","title":"Ejemplo 3. Ejecutar comandos en un cliente y guardar la informaci\u00f3n devuelta en un fichero en el servidor.","text":""},{"location":"Anexo_SSH.html#ejemplo-4-ejecutar-comandos-en-un-cliente-y-guardar-la-informacion-devuelta-en-una-variable","title":"Ejemplo 4. Ejecutar comandos en un cliente y guardar la informaci\u00f3n devuelta en una variable.","text":""},{"location":"Anexo_SSH.html#scp","title":"SCP.","text":"<ul> <li>Este servicio est\u00e1 pensado principalmente para transferir o recibir ficheros a/desde ordenadores remotos.</li> </ul> <p> <p>Estructura SCP<p>scp usuario@IP Origen Destino</p> </p> <p></p> <p>Ejemplos<p>Usuario: root</p> <p>Contrase\u00f1a: salva</p> <p>Cliente: 172.17.0.3</p> </p>"},{"location":"Anexo_SSH.html#ejemplo-1-pasar-un-fichero-a-la-carpeta-homead-del-equipo-remoto-1721703","title":"Ejemplo 1: Pasar un fichero a la carpeta /home/ad del equipo remoto 172.17.0.3","text":"<pre><code>sshpass -p 'salva' scp hosts.txt 172.17.0.3:/home\n</code></pre>"},{"location":"Anexo_SSH.html#ejemplo-2-recoger-un-fichero-de-un-cliente-y-dejarlo-en-la-carpeta-actual-del-servidor","title":"Ejemplo 2: Recoger un fichero de un cliente y dejarlo en la carpeta actual del servidor.","text":"<pre><code>sshpass -p 'salva' scp 172.17.0.3:/home/prueba.sh .\n</code></pre>"},{"location":"Anexo_SSH.html#ejemplo-3-recoger-un-fichero-de-un-cliente-y-dejarlo-en-la-carpeta-homesalva-de-mi-servidor","title":"Ejemplo 3: Recoger un fichero de un cliente y dejarlo en la carpeta /home/salva de mi servidor.","text":"<pre><code>sshpass -p 'salva' scp 172.17.0.3:/home/prueba.sh /home/salva\n</code></pre>"}]}