{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"M\u00e1quinas virtuales y Contenedores.","text":""},{"location":"index.html#que-es-la-virtualizacion","title":"\u00bfQu\u00e9 es la virtualizaci\u00f3n?","text":"<p>Permite reservar una serie de recursos del sistema (RAM, CPU, DISCO) para emular un sistema operativo (guest  / invitado) dentro de otro (host / anfitri\u00f3n).</p> <p>Ventajas:</p> <ul> <li>Podemos aprovechar mejor el hardware de la m\u00e1quina anfitriona, ya que estamos ejecutando varios \"ordenadores\" en uno mismo, aprovechando recursos que de otra forma es posible que no se llegaran a usar.</li> <li>Permite ejecutar software que quiz\u00e1 sea incompatible con tu sistema operativo anfitri\u00f3n, ya sea por un motivo de versiones o porque son sistemas operativos diferentes (Windows, Linux, MAC).</li> </ul>"},{"location":"index.html#que-es-un-hipervisor","title":"\u00bfQu\u00e9 es un Hipervisor?","text":"<p>El hipervisor es la parte software que permite crear y gestionar las m\u00e1quinas virtuales (asignar recursos, crear los discos virtuales, etc). </p> <p>Se distinguen dos tipos:</p> <p>Hipervisores de tipo 1 (hipervisores bare metal):</p> <ul> <li> <p>No necesitan de un sistema operativo anfitri\u00f3n para comunicarse con los componentes del ordenador, por tanto la comunicaci\u00f3n entre las m\u00e1quinas virtuales y los componentes es m\u00e1s directa, r\u00e1pida y eficiente. Es decir, si una m\u00e1quina virtual necesita hacer una operaci\u00f3n, se comunicar\u00e1 con el hipervisor y \u00e9ste con la CPU. </p> </li> <li> <p>Ejemplos: VMWare ESXi, KVM, Hyper-V</p> </li> </ul> <p>Hipervisores de tipo 2 (hipervisores alojados):</p> <ul> <li> <p>Son una aplicaci\u00f3n m\u00e1s del sistema operativo instalado en la m\u00e1quina y el hipervisor accede al hardware de la m\u00e1quina a trav\u00e9s de ese sistema operativo. Por tanto, si una m\u00e1quina virtual requiere hacer una operaci\u00f3n, pasar\u00e1 la orden al hipervisor, \u00e9ste al sistema operativo y de ah\u00ed a la CPU.</p> </li> <li> <p>Ejemplos: VirtualBox y VMWare Workstation.</p> </li> </ul>"},{"location":"index.html#que-es-un-contenedor","title":"\u00bfQu\u00e9 es un Contenedor?","text":"<ul> <li> <p>Los contenedores, a diferencia de las m\u00e1quinas virtuales, comparten el kernel, archivos binarios y librer\u00edas del sistema operativo (anfitri\u00f3n).</p> <p>\ud83d\udca5 Por tanto un host Linux podr\u00e1 crear contenedores relacionados con Linux, y un host Windows podr\u00e1 crear contenedores Windows.</p> </li> </ul> <p>NOTA</p> <ul> <li>Windows tiene la posibilidad de ejecutar contenedores Linux a trav\u00e9s del aislamiento de Hyper-V (WSL). </li> <li>B\u00e1sicamente activas un Kernel Linux en Windows y por tanto en Windows s\u00ed puedes generar contenedores de Linux.  </li> </ul> <ul> <li> <p>Cada contenedor ocupa mucho menos espacio, puesto que se ahorra todo los ficheros del sistema del sistema operativo que ahora recoge de la m\u00e1quina anfitriona.</p> </li> <li> <p>Su objetivo no es simular un sistema operativo completo, sino un servicio/aplicaci\u00f3n en concreto, por tanto aqu\u00ed tambi\u00e9n se produce un ahorro de espacio en disco.</p> <p>\ud83d\udca5 Aunque un \u00fanico contenedor puede emular varios servicios/aplicaciones es habitual tener varios contenedores y cada uno que tenga \u00fanicamente corriendo 1 servicio/  aplicaci\u00f3n y las dependencias que se necesitan para que \u00e9ste funcione.</p> </li> <li> <p>Arranca mucho m\u00e1s r\u00e1pido que una m\u00e1quina virtual, pues utiliza los procesos y ficheros del sistema del anfitri\u00f3n, el cual ya se encuentra arrancado.</p> </li> <li> <p>Docker es integrable con servicios en la nube:</p> <p>\ud83d\udca5 AWS (Amazon Web Service).</p> <p>\ud83d\udca5 Azure (Microsoft).</p> <p>\ud83d\udca5 Google Cloud.</p> </li> <li> <p>Docker es un software que permite la creaci\u00f3n y gesti\u00f3n de contenedores. </p> </li> </ul>"},{"location":"0_MaquinasContenedores.html","title":"M\u00e1quinas virtuales y Contenedores.","text":""},{"location":"0_MaquinasContenedores.html#que-es-la-virtualizacion","title":"\u00bfQu\u00e9 es la virtualizaci\u00f3n?","text":"<p>Permite reservar una serie de recursos del sistema (RAM, CPU, DISCO) para emular un sistema operativo (guest  / invitado) dentro de otro (host / anfitri\u00f3n).</p> <p>Ventajas:</p> <ul> <li>Podemos aprovechar mejor el hardware de la m\u00e1quina anfitriona, ya que estamos ejecutando varios \"ordenadores\" en uno mismo, aprovechando recursos que de otra forma es posible que no se llegaran a usar.</li> <li>Permite ejecutar software que quiz\u00e1 sea incompatible con tu sistema operativo anfitri\u00f3n, ya sea por un motivo de versiones o porque son sistemas operativos diferentes (Windows, Linux, MAC).</li> </ul>"},{"location":"0_MaquinasContenedores.html#que-es-un-hipervisor","title":"\u00bfQu\u00e9 es un Hipervisor?","text":"<p>El hipervisor es la parte software que permite crear y gestionar las m\u00e1quinas virtuales (asignar recursos, crear los discos virtuales, etc). </p> <p>Se distinguen dos tipos:</p> <p>Hipervisores de tipo 1 (hipervisores bare metal):</p> <ul> <li> <p>No necesitan de un sistema operativo anfitri\u00f3n para comunicarse con los componentes del ordenador, por tanto la comunicaci\u00f3n entre las m\u00e1quinas virtuales y los componentes es m\u00e1s directa, r\u00e1pida y eficiente. Es decir, si una m\u00e1quina virtual necesita hacer una operaci\u00f3n, se comunicar\u00e1 con el hipervisor y \u00e9ste con la CPU. </p> </li> <li> <p>Ejemplos: VMWare ESXi, KVM, Hyper-V</p> </li> </ul> <p>Hipervisores de tipo 2 (hipervisores alojados):</p> <ul> <li> <p>Son una aplicaci\u00f3n m\u00e1s del sistema operativo instalado en la m\u00e1quina y el hipervisor accede al hardware de la m\u00e1quina a trav\u00e9s de ese sistema operativo. Por tanto, si una m\u00e1quina virtual requiere hacer una operaci\u00f3n, pasar\u00e1 la orden al hipervisor, \u00e9ste al sistema operativo y de ah\u00ed a la CPU.</p> </li> <li> <p>Ejemplos: VirtualBox y VMWare Workstation.</p> </li> </ul>"},{"location":"0_MaquinasContenedores.html#que-es-un-contenedor","title":"\u00bfQu\u00e9 es un Contenedor?","text":"<ul> <li> <p>Los contenedores, a diferencia de las m\u00e1quinas virtuales, comparten el kernel, archivos binarios y librer\u00edas del sistema operativo (anfitri\u00f3n).</p> <p>\ud83d\udca5 Por tanto un host Linux podr\u00e1 crear contenedores relacionados con Linux, y un host Windows podr\u00e1 crear contenedores Windows.</p> </li> </ul> <p>NOTA</p> <ul> <li>Windows tiene la posibilidad de ejecutar contenedores Linux a trav\u00e9s del aislamiento de Hyper-V (WSL). </li> <li>B\u00e1sicamente activas un Kernel Linux en Windows y por tanto en Windows s\u00ed puedes generar contenedores de Linux.  </li> </ul> <ul> <li> <p>Cada contenedor ocupa mucho menos espacio, puesto que se ahorra todo los ficheros del sistema del sistema operativo que ahora recoge de la m\u00e1quina anfitriona.</p> </li> <li> <p>Su objetivo no es simular un sistema operativo completo, sino un servicio/aplicaci\u00f3n en concreto, por tanto aqu\u00ed tambi\u00e9n se produce un ahorro de espacio en disco.</p> <p>\ud83d\udca5 Aunque un \u00fanico contenedor puede emular varios servicios/aplicaciones es habitual tener varios contenedores y cada uno que tenga \u00fanicamente corriendo 1 servicio/  aplicaci\u00f3n y las dependencias que se necesitan para que \u00e9ste funcione.</p> </li> <li> <p>Arranca mucho m\u00e1s r\u00e1pido que una m\u00e1quina virtual, pues utiliza los procesos y ficheros del sistema del anfitri\u00f3n, el cual ya se encuentra arrancado.</p> </li> <li> <p>Docker es integrable con servicios en la nube:</p> <p>\ud83d\udca5 AWS (Amazon Web Service).</p> <p>\ud83d\udca5 Azure (Microsoft).</p> <p>\ud83d\udca5 Google Cloud.</p> </li> <li> <p>Docker es un software que permite la creaci\u00f3n y gesti\u00f3n de contenedores. </p> </li> </ul>"},{"location":"1_ComandosDocker.html","title":"Comandos B\u00e1sicos en Docker","text":""},{"location":"1_ComandosDocker.html#comandos","title":"Comandos.","text":"<p>Crear un contenedor</p> <p> \ud83d\udd25 docker [ run | start | stop | restart ] [OPCIONES] [contenedor] \ud83d\udd25 </p> Argumentos  Funci\u00f3n  <code>run</code> Crea y arranca un contenedor --&gt; Si lo ejecutas varias veces ejecutas varios contenedores. <code>start | stop |restart</code> Arranca/Detiene/Reinicia un contenedor ya existente. <code>-d</code> Arranca en segundo plano. <code>-p</code> Traducci\u00f3n de puertos entre el contenedor y la m\u00e1quina anfitriona. Solo se puede hacer a la hora de crear la m\u00e1quina. <code>--name</code> Nombre de la m\u00e1quina. <code>-it</code> Redirige la salida al terminal del contenedor, es decir, accedes al terminal del contenedor. <p>Si nos fijamos en la salida vemos que lo primero que hace es buscar la imagen \u201chello-world\u201d en local, al no encontrarlo, lo descarga de un repositorio de docker y posteriormente lo ejecuta.  Si lo ejecut\u00e1is una segunda vez el c\u00f3digo ya se ejecutar\u00e1 directamente en local (/var/lib/docker/). Tambi\u00e9n podemos apreciar que la imagen que se carga es \u201chello-world:latest\u201d, es decir, la \u00faltima versi\u00f3n de la imagen del contenedor.</p> <p>Mostrar los contenedores del sistema, tanto parados como activos</p> <p> \ud83d\udd25 docker ps [opciones] \ud83d\udd25 </p> <p>\u2728 Con \u2013a se muestran todos los contenedores, los activos y los detenidos.</p> <p>\u2728 Una vez sabemos su \u201cnombre\u201d o su \u201cID\u201d podemos arrancarlo/pararlo/reiniciarlo.</p> <p>Copiar o renombrar contenedores.</p> <p> \ud83d\udd25 docker [ cp |rename ] [contenedor] \ud83d\udd25  </p> <p>Ejecutar comandos dentro del contenedor</p> <p> \ud83d\udd25 docker exec [OPCIONES] NombreContenedor Comando [ArgumentosComando] \ud83d\udd25 </p> <p>\u2728 -d: Ejecuta en segundo plano.</p> <p>\u2728-it: Enlaza la entrada y salida a nuestro terminal. Es como entrar al terminal del contenedor.</p> <p>Acceder a los logs de ejecuci\u00f3n del contenedor.</p> <p> \ud83d\udd25 docker logs [OPCIONES] NombreContenedor \ud83d\udd25 </p> <p>Listar todos los contenedores.</p> <p> \ud83d\udd25 docker container ls \u2013a \ud83d\udd25 </p> <p>Eliminar un contenedor</p> <p> \ud83d\udd25 docker container rm NombreContenedor \ud83d\udd25 </p> <p>\u2728 Elimina un contenedor.</p> <p>Crear una imagen a partir de un contenedor</p> <p> \ud83d\udd25 docker commit contenedor imagen \ud83d\udd25 </p> <p>\u2728Crear una imagen de un contenedor es la forma m\u00e1s sencilla para subir nuestro contenedor a la nube o para hacer un backup local.</p>"},{"location":"1_ComandosDocker.html#ejemplos-basicos-en-docker","title":"Ejemplos B\u00e1sicos en Docker","text":"<p>Aviso</p> <p>En los siguientes ejemplos el nombre del contenedor ser\u00e1 Salva.</p> <ul> <li>Crear un contenedor nuevo con la \u00faltima versi\u00f3n de Ubuntu.</li> </ul> <pre><code>docker run -d -it --name Salva ubuntu\n</code></pre> <ul> <li>Acceder al contenedor haciendo uso del int\u00e9rprete /bin/bash.</li> </ul> <pre><code>docker exec -it Salva bash\n</code></pre> <ul> <li>Actualiza los repositorios e instala dentro del contendor.</li> </ul> <pre><code>apt-get update\napt-get install nano iputils-ping net-tools iproute2\n</code></pre> <ul> <li>Det\u00e9n el contenedor desde la m\u00e1quina anfitriona.</li> </ul> <pre><code>docker stop Salva\n</code></pre> <ul> <li>Arranca el contenedor.</li> </ul> <pre><code>docker start Salva\n</code></pre> <ul> <li>Descargar un fichero del contenedor a la m\u00e1quina anfitriona.</li> </ul> <pre><code>docker cp Salva:/home/prueba.txt .\n</code></pre> <ul> <li>Crear una imagen del contendor.</li> </ul> <pre><code>docker commit Salva copiaContendor\n</code></pre> <ul> <li>Lista las imagenes que tienes en el sistema</li> </ul> <pre><code>docker images\n</code></pre> <ul> <li>Crea un .tar de la imagen copiaContendor.</li> </ul> <pre><code>docker image save -o /home/usuario/backup.tar copiaContendor\n</code></pre> <ul> <li>Saca la imagen del .tar y vu\u00e9lcala en un contenedor. Recuerda estar en el mismo directorio que el .tar.</li> </ul> <pre><code>docker load -i backup.tar\ndocker run -d -it --name NuevoContenedor copiaContendor\n</code></pre>"},{"location":"1_ComandosDocker.html#como-trabajar-en-clasecasa-usando-docker","title":"\u00bfC\u00f3mo trabajar en clase/casa usando docker?","text":"<p>Muchos de vosotros hac\u00e9is uso de Windows en casa, por lo que os puede entrar dudas de c\u00f3mo podemos llevar nuestro trabajo a casa para seguir con \u00e9l.</p> <p>Existen dos opciones explicadas en los siguientes v\u00eddeos:</p> <ol> <li> <p>Guardarnos las im\u00e1genes en un USB.</p> </li> <li> <p>Subir las im\u00e1genes a Docker HUB..</p> </li> </ol>"},{"location":"2_EjemplosDocker.html","title":"Ejemplos B\u00e1sicos en Docker","text":"<p>Aviso</p> <p>En los siguientes ejemplos el nombre del contenedor ser\u00e1 Salva.</p> <ul> <li>Crear un contenedor nuevo con la \u00faltima versi\u00f3n de Ubuntu.</li> </ul> <pre><code>docker run -d -it --name Salva ubuntu\n</code></pre> <ul> <li>Acceder al contenedor haciendo uso del int\u00e9rprete /bin/bash.</li> </ul> <pre><code>docker exec -it Salva bash\n</code></pre> <ul> <li>Actualiza los repositorios e instala dentro del contendor.</li> </ul> <pre><code>apt-get update\napt-get install nano iputils-ping net-tools iproute2\n</code></pre> <ul> <li>Det\u00e9n el contenedor desde la m\u00e1quina anfitriona.</li> </ul> <pre><code>docker stop Salva\n</code></pre> <ul> <li>Arranca el contenedor.</li> </ul> <pre><code>docker start Salva\n</code></pre> <ul> <li>Descargar un fichero del contenedor a la m\u00e1quina anfitriona.</li> </ul> <pre><code>docker cp Salva:/home/prueba.txt .\n</code></pre> <ul> <li>Crear una imagen del contendor.</li> </ul> <pre><code>docker commit Salva copiaContendor\n</code></pre> <ul> <li>Lista las imagenes que tienes en el sistema</li> </ul> <pre><code>docker images\n</code></pre> <ul> <li>Crea un .tar de la imagen copiaContendor.</li> </ul> <pre><code>docker image save -o /home/usuario/backup.tar copiaContendor\n</code></pre> <ul> <li>Saca la imagen del .tar y vu\u00e9lcala en un contenedor. Recuerda estar en el mismo directorio que el .tar.</li> </ul> <pre><code>docker load -i backup.tar\ndocker run -d -it --name NuevoContenedor copiaContendor\n</code></pre>"},{"location":"3_Clase.html","title":"\u00bfC\u00f3mo trabajar en clase/casa usando docker?","text":"<p>Muchos de vosotros hac\u00e9is uso de Windows en casa, por lo que os puede entrar dudas de c\u00f3mo podemos llevar nuestro trabajo a casa para seguir con \u00e9l.</p> <p>Existen dos opciones explicadas en los siguientes v\u00eddeos:</p> <ol> <li> <p>Guardarnos las im\u00e1genes en un USB.</p> </li> <li> <p>Subir las im\u00e1genes a Docker HUB..</p> </li> </ol>"},{"location":"4_Scripts.html","title":"Scripts en Linux.","text":""},{"location":"4_Scripts.html#creacion-de-scripts","title":"Creaci\u00f3n de Scripts.","text":"<ul> <li>\u00bfD\u00f3nde creo mis scripts?</li> </ul> <p>Lo primero que debemos preguntarnos es d\u00f3nde vamos a crear el script. Si empezamos a crear el script en un directorio donde no tenemos permisos de escritura no nos dejar\u00e1 guardar los cambios y nuestro trabajo ser\u00e1 en vano.</p> <ul> <li>\u00bfCon qu\u00e9 creo mis scripts?</li> </ul> <p>Para la creaci\u00f3n de scripts usaremos el editor de texto nano:</p> <p> Controles  Funcionamiento  <code>nano \u201cNombreFichero\u201d.sh</code> Genera o Abre el fichero para su edici\u00f3n. <code>Control + o</code> Guardar Cambios. <code>Control + x</code> Salir. <code>Control + _</code> Ir a una l\u00ednea. <code>Alt + U</code> Deshacer. <code>Alt + E</code> Rehacer. <p></p> <p>En la leyenda \u201c^\u201d equivale a \u201cControl\u201d y \u201cM-\u201c equivale a \u201cAlt\u201d.</p> <ul> <li>\u00bfC\u00f3mo empiezo mis scripts?</li> </ul> <p>Lo primero ser\u00e1 crear el \u201cshebang\u201d  \ud83d\udd00 #!/bin/bash. </p> <p>La funci\u00f3n del shebang es decirle al sistema operativo que cuando le digamos de ejecutar este fichero use el SHELL bash, cuya ubicaci\u00f3n dentro del sistema es /bin/bash. Si vamos a la ruta /bin, veremos que existe un ejecutable llamado \u201cbash\u201d.</p> <ul> <li>\u00bfC\u00f3mo ejecuto mis scripts?</li> </ul> <p>Una vez guardados los cambios debemos darle permisos de ejecuci\u00f3n al fichero, en caso de que estemos trabajando con un script. Es importante solo dar permiso de ejecuci\u00f3n al usuario propietario, si no se puede producir una brecha de seguridad, pues los scripts suelen almacenar/manipular datos/servicios importantes de nuestro servidor. </p> <pre><code>chmod 750 \u201cNombreFichero\u201d.sh\n</code></pre> <p>Una vez hecho, ya podemos ejecutar nuestro script de una de las siguientes formas:</p> <pre><code>./\u201dNombreFichero\u201d.sh\nbash \u201cNombreFIchero\u201d.sh\n</code></pre> <p>Warning</p> <p>No us\u00e9is el comando \u201csh script.sh\u201d donde script.sh es el nombre de vuestro script. Esto fuerza al terminal a usar el shell SHELL, y nosotros vamos a usar BASH. Por lo que en ciertos comandos nos dar\u00e1 error al usar SHELL. </p>"},{"location":"4_Scripts.html#comentarios","title":"Comentarios","text":"<p>Importante el uso de comentarios para poder describir que hace cada parte del c\u00f3digo, tanto de cara a vosotros como de cara a compa\u00f1eros de trabajo que vayan a modificar tu c\u00f3digo.</p> <p>Para ello se usa \ud83d\udd00 \u201c#\u201d:</p>"},{"location":"5_Variables.html","title":"Variables en BASH","text":""},{"location":"5_Variables.html#como-creo-una-variable","title":"\u00bfC\u00f3mo creo una variable?","text":"<p>Siempre que creemos una variable debemos hacer uso del \u201c=\u201d sin espacios en blanco.</p> <ul> <li>Los textos \ud83d\udd00 comillas dobles.</li> <li>Los n\u00fameros \ud83d\udd00 sin comillas dobles.</li> </ul> <p>Variables de cadenas de texto \ud83d\udd00 Con comillas dobles.</p> <p>Variables que contienen el valor de un comando \ud83d\udd00 Usando comillas abiertas.</p> <p>Variables compuestas de otras variables.</p>"},{"location":"5_Variables.html#como-muestro-por-pantalla-una-variable","title":"\u00bfC\u00f3mo muestro por pantalla una variable?","text":"<p>Haciendo uso del s\u00edmbolo del dolar \ud83d\udd00 \u201c$\u201d.</p> <p>Podemos hacer uso de la opci\u00f3n \u201cecho \u2013n\u201d para mostrar varias salidas en la misma l\u00ednea.</p> <p>Con la opci\u00f3n \u201cecho \u2013e\u201d puedo hacer uso de caracteres especiales con la contrabarra:</p> <p>\ud83d\udd00 \\n  Salto de l\u00ednea.</p> <p>\ud83d\udd00 \\t  Tabulador.</p>"},{"location":"5_Variables.html#como-recojo-informacion-del-usuario","title":"\u00bfC\u00f3mo recojo informaci\u00f3n del usuario?","text":"<p>Con el comando \u201cread\u201d podemos recoger lo que escriba el usuario por terminal y guardarlo en una variable.</p> <p>Podemos hacerlo todo en la misma l\u00ednea con read \u2013p:</p>"},{"location":"5_Variables.html#videos-de-repaso","title":"V\u00eddeos de repaso.","text":"<p>V\u00eddeos de repaso sobre scripts y variables:</p> <ol> <li> <p>Repaso de Scripts y Variables.</p> </li> <li> <p>Ejemplos de uso de Variables..</p> </li> </ol>"},{"location":"6_Aritmetica.html","title":"Operaciones Matem\u00e1ticas.","text":""},{"location":"6_Aritmetica.html#operaciones","title":"Operaciones","text":"<p> S\u00edmbolo  Significado  <code>*</code> Multiplicaci\u00f3n <code>/</code> Divisi\u00f3n <code>-</code> Resta <code>+</code> Suma <code>%</code> Resto. Ej. 5%2 = 1 <p></p>"},{"location":"6_Aritmetica.html#comandos-aritmeticos","title":"Comandos Aritm\u00e9ticos.","text":"<p>Existen varias posibilidades para realizar operaciones matem\u00e1ticas.</p>"},{"location":"6_Aritmetica.html#1-usando-doble-parentesis","title":"1. Usando doble par\u00e9ntesis:","text":"<pre><code>suma=$(( $x + $y ))\n</code></pre>"},{"location":"6_Aritmetica.html#2-usando-el-comando-let","title":"2. Usando el comando \u201clet\u201d:","text":"<pre><code>#Ejemplo de Multiplicaci\u00f3n:\nlet \"mult = $x * $y\"\n\n#Ejemplo de triplicar un valor:\nlet \u201cmult = $mult * 3\u201d\n\n\n#Ejemplo de incrementar un valor o decrementar:\nlet mult++\nlet mult--\n</code></pre>"},{"location":"6_Aritmetica.html#3-usar-el-comando-expr","title":"3. Usar el comando \u201cexpr\u201d:","text":"<ul> <li>Este comando es m\u00e1s antiguo y tiene el inconveniente de tener que escaparse (a\u00f1adir ) delanta de cada car\u00e1cter especial como *,&lt;,&gt;,(,), etc.</li> </ul> <pre><code>#Ejemplo del uso de * y () escapado (\\)\nexpr 2 \\* 3\nexpr \\( 2 + 2 \\) \\* 3\n</code></pre> <ul> <li>Por contra, expr es \u00fatil para comprobar longitud de cadena de caracteres y sustraer subcadenas.</li> </ul> <pre><code>#Este comando devuelve 10, que es la longitud de la cadena pasada como par\u00e1metro. \n#Tened en cuenta que se contabiliza cada espacio en blanco como una letra.\nexpr length \u201cHola Mundo\u201d\n\n#Desde el car\u00e1cter n.\u00ba 4 (a) devuelve los siguientes 4 caracteres \u2192 \u201ca Mu\u201d\nexpr substr \u201cHola Mundo\u201d 4 4\n\n#. Desde el car\u00e1cter n\u00famero 6, devuelve los siguientes 5 caracteres \u2192 \u201cMundo\u201d\nexpr substr \u201cHola Mundo\u201d 6 5\n</code></pre>"},{"location":"6_Aritmetica.html#4-comando-bc-para-decimales","title":"4. Comando \"bc\" para decimales.","text":"<p>Para trabajar con decimales debemos usar el comando \u201cbc\u201d:</p> <pre><code>operacion=`echo \u201c7.5 * 12.5\u201d | bc `\n</code></pre> <p>Las comillas invertidas devuelven el valor de la operaci\u00f3n o del comando.</p> <p>Para sacar todos los posibles decimales usamos la opci\u00f3n \u201c-l\u201d</p> <pre><code>operacion=`echo \u201c7.5 * 12.5\u201d | bc  -l`\n</code></pre> <p>Si queremos cierto n\u00famero de decimales usamos la opci\u00f3n scale:</p> <pre><code>operacion=`echo \u201cscale=3;7.5 * 12.5\u201d | bc `\n</code></pre>"},{"location":"7_Comparadores.html","title":"Comparadores.","text":""},{"location":"7_Comparadores.html#comparadores-aritmeticos","title":"Comparadores Aritm\u00e9ticos.","text":"<p> Comparador  Significado  <code>-eq</code> Igual a (Equeal to) <code>-ne</code> No Igual (Not Equal) <code>-gt</code> Mayor que (Greater Than) <code>-ge</code> Mayor o igual (Greater or Equal) <code>-lt</code> Menor que (Lower Than) <code>-le</code> Menor o igual (Lower or Equal) <p></p>"},{"location":"7_Comparadores.html#ejemplo-1","title":"Ejemplo 1","text":"<pre><code>if [ $edad -gt 25 ]\nthen\necho \"Tienes m\u00e1s de 25 a\u00f1os.\"\nelse\necho \"Tienes 25 o menos a\u00f1os.\"\nfi\n</code></pre>"},{"location":"7_Comparadores.html#ejemplo-2","title":"Ejemplo 2","text":"<pre><code>if [ $examenes -ne 20 ]\nthen\necho \"No tenemos exactamente 20 ex\u00e1menes entregados, algo ha ido mal\"\nelse\necho \"Han entregado 20 ex\u00e1menes.\"\nfi\n</code></pre>"},{"location":"7_Comparadores.html#ejemplo-3","title":"Ejemplo 3","text":"<pre><code>if [ $memoria -le 100000 ]\nthen\necho \"Quedan 100MB o menos en el sistema.\"\nfi\n</code></pre>"},{"location":"7_Comparadores.html#comparadores-de-archivos","title":"Comparadores de Archivos.","text":"<p> Comparador  Significado  <code>-f</code> Verdadero si es un fichero <code>-e</code> Verdadero si existe <code>-d</code> Verdadero si es un directorio <code>-r</code> Verdadero si tengo permisos de lectura <code>-w</code> Verdadero si tengo permisos de escritura <code>-x</code> Verdadero si tengo permisos de ejecuci\u00f3n <code>-O</code> Verdadero si soy el usuario propietario <code>-G</code> Verdadero si pertenezco al grupo propietario <code>-s</code> Verdadero si el fichero NO est\u00e1 vac\u00edo <code>-L</code> Verdadero si se trata de un enlace simb\u00f3lico <p></p>"},{"location":"7_Comparadores.html#ejemplo-1_1","title":"Ejemplo 1","text":"<pre><code>if [ -e $carpeta ]\nthen\necho \"La carpeta existe, aunque quiz\u00e1 se trate de un fichero.\"\nelse\necho \"La carpeta no existe\"\nfi\n</code></pre>"},{"location":"7_Comparadores.html#ejemplo-2_1","title":"Ejemplo 2","text":"<pre><code>if [ -d $carpeta ]\nthen\necho \"La carpeta existe y se trata seguro de una carpeta.\"\nelse\necho \"La carpeta no existe\"\nfi\n</code></pre>"},{"location":"7_Comparadores.html#ejemplo-3_1","title":"Ejemplo 3","text":"<pre><code>if [ -s $fichero ]\nthen\necho \"El fichero contiene informaci\u00f3n.\"\nelse\necho \"El fichero est\u00e1 vaci\u00f3 y lo voy a borrar.\"\nrm -f $fichero\nfi\n</code></pre>"},{"location":"7_Comparadores.html#comparadores-de-cadenas-variables","title":"Comparadores de cadenas / variables.","text":"<p> Comparador  Significado  <code>=</code> Verdadero si es igual <code>!=</code> Verdadero si es diferente <code>-n</code> Verdadero si la variable tiene contenido <code>-z</code> Verdadero si la variable est\u00e1 vac\u00eda <p></p>"},{"location":"7_Comparadores.html#ejemplo-1_2","title":"Ejemplo 1","text":"<pre><code>if [ $usuario = \"ajc\" ]\nthen\necho \"Bienvenido Alejandro!\"\nelse\necho \"\u00bfQui\u00e9n eres?\"\nread -p \"Introduce tu nombre: \" nombre\nfi\n</code></pre>"},{"location":"7_Comparadores.html#ejemplo-2_2","title":"Ejemplo 2","text":"<pre><code>if [ $salir != \"s\" ]\nthen\necho \"El usuario quiere seguir jugando.\"\nelse\necho \"El usuario quiere continuar jugando.\"\nfi\n</code></pre>"},{"location":"7_Comparadores.html#ejemplo-3_2","title":"Ejemplo 3","text":"<pre><code>if [ -z $respuesta]\nthen\necho \"Hubo alg\u00fan error y se ha recibido una respuesta vac\u00eda\"\nfi\n</code></pre>"},{"location":"8_IF.html","title":"Estructura IF.","text":"<p>Una estructura de programaci\u00f3n IF sirve para generar condiciones:</p> <ul> <li>Si se cumple cierta condici\u00f3n realizaremos una acci\u00f3n, si no, realizaremos otra:</li> </ul> <p>Estructura IF simple</p> <pre><code>if [ condici\u00f3n ]\nthen\nACCIONES\nfi\n</code></pre> <p>Cosas que se deben tener en cuenta:</p> <ul> <li>Hay que dejar un espacio en blanco entre los corchetes.</li> <li>Podemos hacer condiciones usando variables, haciendo uso del $, puesto que queremos comparar su contenido.</li> <li>Es recomendable tabular (indentar) las acciones para que  quede m\u00e1s limpio el c\u00f3digo.</li> <li>Siempre debe terminar la estructura con \u201cfi\u201d</li> </ul> <p>Podemos crear condiciones con alternativas, donde si no se cumple una condici\u00f3n se realiza otra  lista de acciones:</p> <p>Estructura IF ELSE</p> <pre><code>if [ condici\u00f3n ]\nthen\nACCIONES\nelse\nACCIONES\nfi\n</code></pre> <p>Se pueden anidar muchas condiciones diferentes con el elemento \u201celif\u201d:</p> <p>Estructura IF ELSE</p> <pre><code>if [ condici\u00f3n ]\nthen\nACCIONES\nelif [ condici\u00f3n ]\nthen\nACCIONES\nelif [ condici\u00f3n ]\nthen\nACCIONES\nelse\nACCIONES\nfi\n</code></pre>"},{"location":"8_IF.html#ejemplos","title":"Ejemplos.","text":""},{"location":"8_IF.html#ejemplo-1","title":"Ejemplo 1.","text":"<pre><code>read -p  \"Cual es tu nombre? \" nombre\n\nif [ $nombre = \"Salva\" ]\nthen\necho \"Bienvenido Salva\"\nfi\n</code></pre>"},{"location":"8_IF.html#ejemplo-2","title":"Ejemplo 2.","text":"<pre><code>read -p  \"Cual es tu nombre? \" nombre\n\nif [ $nombre = \"Salva\" ]\nthen\necho \"Bienvenido Salva\"\ntouch fichero.txt\nelse\necho \"No eres Bienvenido\"\necho \"AutoDestruccion\"\nrm -f fichero.txt\nfi\n</code></pre>"},{"location":"8_IF.html#ejemplo-3","title":"Ejemplo 3.","text":"<pre><code>read -p  \"Cual es tu nombre? \" nombre\n\nif [ $nombre = \"Salva\" ]\nthen\necho \"Bienvenido Salva\"\ntouch fichero.txt\nelif [ $nombre = \"Pepe\" ]\nthen\necho \"Que tal Pepe?\"\nelse\necho \"No eres Bienvenido\"\necho \"AutoDestruccion\"\nrm -f fichero.txt\nfi\n</code></pre>"},{"location":"8_IF.html#ejemplo-4","title":"Ejemplo 4.","text":"<pre><code>read -p \"Cual es tu edad? \" edad\n\nif [ $edad -ge 33 ]\nthen\necho \"Tienes la edad de Cristo o mas\"\nelse\necho \"Tienes menos que la edad de Cristo\"\nfi\n</code></pre>"},{"location":"8_IF.html#ejemplo-5","title":"Ejemplo 5.","text":"<pre><code>read -p \"Inserta un nombre de archivo: \" fic\n\nif [ -f $fic ]\nthen\necho \"$fic es un fichero\"\nelse\necho \"$fic no es un fichero\"\nfi\n</code></pre>"},{"location":"8_IF.html#ejemplo-6","title":"Ejemplo 6.","text":"<pre><code>read -p \"Inserta un directorio: \" dir\n\nif [ -e $dir ]\nthen\necho \"$dir existe, pero no se si es un directorio.\"\nelse\necho \"$dir no existe.\"\nfi\n</code></pre>"},{"location":"8_IF.html#ejemplo-7","title":"Ejemplo 7.","text":"<pre><code>read -p  \"Indica un ficher o directorio: \" recurso\n\nif [ -f $recurso ]\nthen\necho \"$recurso es un fichero\"\nelif [ -d $recurso ]\nthen\necho \"$recurso es un directorio\"\nelif [ -e $recurso ]\nthen\necho \"$recurso existe pero no es ni un directorio ni un fichero\"\nelse\necho \"El $recurso ni si quiera existe\"\nfi\n</code></pre>"},{"location":"8_IF.html#videos-de-ejemplo","title":"V\u00eddeos de Ejemplo.","text":"<ol> <li>Ejemplos de la Estructura IF.</li> </ol>"}]}